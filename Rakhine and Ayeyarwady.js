var geometry = /* color: #d63000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[96.07567205112426, 16.335456156523236],
              [96.07634796779601, 16.334732880277258],
              [96.07691927831618, 16.335126692942325],
              [96.07626481931655, 16.335834524169424],
              [96.07592686098067, 16.335608018455602]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry2 = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[96.06334461849181, 16.346436242235338],
              [96.06344654243438, 16.3461402564558],
              [96.06388910692183, 16.346173715740317]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry3 = /* color: #0b4a8b */ee.Feature(
        ee.Geometry.Polygon(
            [[[96.05266406219451, 16.362915507849458],
              [96.05469181220977, 16.36478391087732],
              [96.05354919116942, 16.365705238015476],
              [96.05089916866271, 16.364006698567806]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry4 = /* color: #ffc82d */ee.Feature(
        ee.Geometry.Polygon(
            [[[96.00740446727721, 16.386801923810424],
              [96.00864901226012, 16.388695830260342],
              [96.00728645008056, 16.389776583842263],
              [96.00471152942626, 16.387337160108185]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    tcc = ee.Image("users/pawlokdass/Sumalika/tcc_myanmar_calib_2018_wgs84_bd"),
    geometry5 = /* color: #00ffff */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.84724172037093, 16.196865294709998],
              [95.8493982164189, 16.196442871369594],
              [95.85042818468062, 16.2001313178042],
              [95.84904416482894, 16.20091433107607]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    table = ee.FeatureCollection("users/pawlokdass/Sumalika/Ayeyarwady_Rakhine"),
    geometry6 = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.62177314555458, 16.34288332862514],
              [95.62209769284539, 16.34305062777935],
              [95.6219555357676, 16.34362201765667],
              [95.62152906453423, 16.343495900214837]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry7 = /* color: #0b4a8b */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.62009140050225, 16.340954230337204],
              [95.62039180791191, 16.34118330371208],
              [95.62014772689156, 16.3413995075499],
              [95.61984731948189, 16.341170434428474]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry8 = /* color: #00ffff */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.6579588273745, 16.340375111057142],
              [95.65844967162423, 16.340434309995626],
              [95.65826996362023, 16.340730304419083],
              [95.65795614516549, 16.340704565791363]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry9 = /* color: #bf04c2 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.652465663312, 16.341654318908812],
              [95.65305306708626, 16.341937442251243],
              [95.65306916034035, 16.342024953019536],
              [95.65339102542214, 16.342210269811275],
              [95.65325423276238, 16.34248309699039],
              [95.65229131972603, 16.342042969937562]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry10 = /* color: #ff0000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.65011068379692, 16.338614577907375],
              [95.6506819943171, 16.33895175726768],
              [95.65016701018624, 16.33966214851987],
              [95.64942403828911, 16.339379021881008]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry11 = /* color: #00ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.63383772170357, 16.372635872618698],
              [95.63440635001473, 16.373117105674933],
              [95.6342561463099, 16.373418197411002],
              [95.63354536092095, 16.37291123071601]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry12 = /* color: #0000ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.7123513439875, 16.393652040299905],
              [95.71353419816307, 16.39316828477723],
              [95.71377023255639, 16.39360829649887],
              [95.7134859184008, 16.393703503582675],
              [95.71353419816307, 16.393837308054206],
              [95.71262492930703, 16.39413836777905]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry13 = /* color: #999900 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.75799717700295, 16.4225233774572],
              [95.75915320908837, 16.42248735849618],
              [95.75912906920723, 16.423063661071748],
              [95.75796230828576, 16.423066233847276]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry14 = /* color: #009999 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.03375916874222, 15.725999769766567],
              [95.0426533738356, 15.726010097009718],
              [95.04273920452408, 15.730223568486396],
              [95.03407030498795, 15.730027354840166]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry15 = /* color: #ff00ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.35942225849442, 15.753199909803012],
              [95.360967210887, 15.751609720863483],
              [95.36452918445877, 15.753086325291626],
              [95.3629305878859, 15.755729730184537],
              [95.3595080891829, 15.754728131597771]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry16 = /* color: #ff9999 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.31271963512711, 15.93453367893947],
              [95.31623869335465, 15.934265447383915],
              [95.31666784679703, 15.938619007544718],
              [95.31398563778214, 15.938701538578544]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry17 = /* color: #99ff99 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.25372176563553, 15.942642355925026],
              [95.25568514263443, 15.946180772543192],
              [95.25183349048905, 15.946902890712687],
              [95.25026708042435, 15.944396097912222]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry18 = /* color: #9999ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.27564077770523, 16.017276283739267],
              [95.28495340740494, 16.017039100077852],
              [95.28467445766739, 16.02125680225577],
              [95.27576952373795, 16.02099899905707]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry19 = /* color: #ffff99 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.89795356190018, 16.37113683690513],
              [94.89916592037491, 16.36930452352618],
              [94.90066795742325, 16.36886188344322],
              [94.90152626430802, 16.369273641692516],
              [94.90196614658646, 16.370508911225173],
              [94.90101128017716, 16.37218680647646],
              [94.89861874973587, 16.371497121218614]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry20 = /* color: #99ffff */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.82903688347153, 16.35887647984228],
              [94.82887058651261, 16.357471276368575],
              [94.830200962184, 16.357522749201777],
              [94.83150988018326, 16.357810996816845],
              [94.8319122115355, 16.357728640398832],
              [94.83208387291245, 16.358562497526155],
              [94.83001320755295, 16.358835301862374]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry21 = /* color: #ff99ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.83221530115418, 16.360315130061238],
              [94.83314870989136, 16.359584225013975],
              [94.83354835903458, 16.359977987580216],
              [94.8326149502974, 16.36065484555992],
              [94.83234941160492, 16.360451531052203]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry22 = /* color: #d63000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.33566056883149, 17.115288768156738],
              [95.33658861315064, 17.115288768156738],
              [95.33661007082276, 17.116088555380756],
              [95.3356820265036, 17.11609368221084]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry23 = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.18853335773758, 17.112417708776412],
              [95.18834828531556, 17.112094711824156],
              [95.18872111236863, 17.1119819191056],
              [95.18917440569214, 17.112110092644127],
              [95.18925487196259, 17.11239463758414],
              [95.1892575541716, 17.11270225324607],
              [95.18880962526612, 17.112489485800783],
              [95.18877207433991, 17.112353622124125]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry24 = /* color: #0b4a8b */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.72841381227784, 15.94497379779719],
              [94.73080634271912, 15.945056326216333],
              [94.73064541017823, 15.946975102386647],
              [94.72828506624512, 15.946892574757186]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry25 = /* color: #ffc82d */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.36379163658432, 16.118623243265464],
              [94.36435221826844, 16.118628396802603],
              [94.36435490047745, 16.119532840496415],
              [94.3638050476294, 16.119532840496415]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry26 = /* color: #00ffff */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.3729916135054, 16.12327167932981],
              [94.37336444055848, 16.12327167932981],
              [94.37336712276749, 16.123817940711685],
              [94.37299697792344, 16.123820517412742]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry27 = /* color: #bf04c2 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.38169806396775, 16.114703939482457],
              [94.38371508514695, 16.11471424676034],
              [94.38373654281907, 16.11613664596945],
              [94.38175170814804, 16.116167567578085]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry28 = /* color: #ff0000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.36679302847199, 16.130684730117686],
              [94.37247931158356, 16.13058166561933],
              [94.3724685827475, 16.134611447564236],
              [94.3668681303244, 16.134590835077475]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry29 = /* color: #00ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.30369674360566, 16.011336295021206],
              [94.30605172312073, 16.011305357117315],
              [94.30601953661255, 16.013202873019512],
              [94.30370210802369, 16.013171935404852]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry30 = /* color: #0000ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.25341068899445, 15.99205073878788],
              [94.2548429886084, 15.992045581973143],
              [94.25483225977234, 15.99312851014872],
              [94.25343214666657, 15.993138823722203]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry31 = /* color: #999900 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.230456344245, 15.986927377772224],
              [94.23050730621628, 15.986777826258974],
              [94.230636052249, 15.986687579602048],
              [94.23084526455216, 15.986713364365325],
              [94.23078625595383, 15.987089821530583],
              [94.23056095039658, 15.987185224946218]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry32 = /* color: #009999 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.2177775422316, 16.012511931816864],
              [94.21800821220688, 16.011996302495596],
              [94.21845345890335, 16.011898332774013],
              [94.21917765533738, 16.011671455339457],
              [94.22027199661545, 16.01139301449924],
              [94.22115176117234, 16.01126926289007],
              [94.22194569504074, 16.011217699696942],
              [94.22134488022141, 16.01216646031884],
              [94.21871095096878, 16.012872871549387]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry33 = /* color: #ff00ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.2813727179747, 16.523582965123282],
              [94.27976339256577, 16.522626386640585],
              [94.27764981186203, 16.52277038800541],
              [94.27745669281296, 16.52057949848914],
              [94.28195207512192, 16.521628659949744],
              [94.28395836746506, 16.52405610971831],
              [94.28195207512192, 16.524652681685943]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry34 = /* color: #ff9999 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.27175968086533, 16.504393918294667],
              [94.2727091828566, 16.504465925783503],
              [94.27291303074173, 16.504892826773737],
              [94.27276819145493, 16.505571751708448],
              [94.27176504528336, 16.505669475555813]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry35 = /* color: #99ff99 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.27269845402054, 16.51468043066766],
              [94.27317052280716, 16.514052969090695],
              [94.27368014251999, 16.514623856346756],
              [94.27328854000382, 16.515323319514575]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry36 = /* color: #9999ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.26802872812561, 16.51728540304983],
              [94.26835863983445, 16.516488228656065],
              [94.26897554790787, 16.516879101673013],
              [94.26873146688752, 16.517473124283466]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry37 = /* color: #ffff99 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.26655887758545, 16.518488873000585],
              [94.26702826416306, 16.518771738781293],
              [94.26652132665924, 16.519499473386414],
              [94.26604121124558, 16.519232037666374]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry38 = /* color: #99ffff */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.26409124529175, 16.522294668802385],
              [94.26436483061127, 16.52249524244705],
              [94.264496258853, 16.52240267002155],
              [94.2647296110373, 16.522659815538415],
              [94.26420926248841, 16.523132962394953],
              [94.26368891393952, 16.522736959126714]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry39 = /* color: #ff99ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.26148682033829, 16.535879205240295],
              [94.26230489408783, 16.536156902998894],
              [94.26210372841172, 16.536570877619358],
              [94.26131784117035, 16.536318893173526]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry40 = /* color: #d63000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.26081358587555, 16.534177012099725],
              [94.26115422642044, 16.5344212854519],
              [94.26114349758438, 16.534614132616806],
              [94.26077335274033, 16.53507182245016],
              [94.26027714407257, 16.53479669442204]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry41 = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.26814942753128, 16.539255262923955],
              [94.26865904724411, 16.539622948807676],
              [94.26825403368287, 16.540103767752175],
              [94.2677926937323, 16.539754081365913]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry42 = /* color: #0b4a8b */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.30122106468491, 16.5252106805222],
              [94.30202036297135, 16.525539821936874],
              [94.30206864273362, 16.52570696384675],
              [94.30195330774598, 16.526102961025025],
              [94.3010038057547, 16.525907533947617]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry43 = /* color: #ffc82d */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.29723530208878, 16.520895790411863],
              [94.29703145420365, 16.520263206048607],
              [94.2975088874083, 16.520299206840328],
              [94.29748742973618, 16.519980342451724],
              [94.29805605804734, 16.519970056494934],
              [94.29807215130143, 16.52032492168743],
              [94.29825454151444, 16.520330064656452],
              [94.29828672802262, 16.52114779498769],
              [94.29744987880997, 16.521214653289373]]]),
        {
          "Class": "Coconut",
          "system:index": "0"
        }),
    geometry44 = /* color: #d63000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.74328806197457, 18.75628868847295],
              [93.74407126700692, 18.75661377870498],
              [93.74356701171212, 18.757416342533325],
              [93.74275162017159, 18.757121730938557]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry45 = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.69457914626412, 18.71432139582118],
              [93.69516386782936, 18.71432647662294],
              [93.69514777457528, 18.71485995995814],
              [93.69458451068215, 18.714865040743714]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry46 = /* color: #0b4a8b */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.12372185981087, 18.891791800064336],
              [94.1260500172358, 18.891771498278164],
              [94.12607147490792, 18.892715528731284],
              [94.12375404631905, 18.892715528731284]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry47 = /* color: #ffc82d */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.13333221471123, 19.034343357951883],
              [94.13446678912453, 19.034343357951883],
              [94.1344426492434, 19.035065989431125],
              [94.1333456257563, 19.03505584725669]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry48 = /* color: #00ffff */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.21351417100243, 19.111923320322646],
              [94.21373142993264, 19.112022160637018],
              [94.2137072900515, 19.112189428726722],
              [94.21345248019509, 19.112164085087638]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry49 = /* color: #bf04c2 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.21153470074944, 19.114632537296448],
              [94.21188338792138, 19.114731375991216],
              [94.21184047257714, 19.114888504051006],
              [94.21147569215111, 19.114827680303634]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry50 = /* color: #ff0000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.27259787118248, 19.1447629292131],
              [94.27356078421883, 19.144788267851464],
              [94.27352323329262, 19.145259565815945],
              [94.27259787118248, 19.14524943039001]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry51 = /* color: #00ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.44974704778008, 19.184451133375475],
              [94.45022179877571, 19.184484065675502],
              [94.45020302331261, 19.184820988058842],
              [94.44976314103417, 19.18480578856768]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry53 = /* color: #999900 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.44814308678917, 19.18585708339944],
              [94.44829597270302, 19.18577095347286],
              [94.44838716780953, 19.18591028127276],
              [94.4482020953875, 19.185996411126446]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry52 = /* color: #009999 */ee.Feature(
        ee.Geometry.Polygon(
            [[[92.25730939900689, 21.19786891641506],
              [92.25767686164193, 21.19790142581543],
              [92.25764467513375, 21.198274033047085],
              [92.25727184808068, 21.198254027313553]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry54 = /* color: #ff00ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[92.26562961137108, 21.331084750286244],
              [92.26737841164879, 21.331184688718004],
              [92.2673247674685, 21.33241392586071],
              [92.2656510690432, 21.332353963312205]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry55 = /* color: #ff9999 */ee.Feature(
        ee.Geometry.Polygon(
            [[[92.26569130217842, 21.38245661153292],
              [92.26711823737435, 21.382396669460327],
              [92.26720406806282, 21.383575525714146],
              [92.2657771328669, 21.383595506246763]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry56 = /* color: #99ff99 */ee.Feature(
        ee.Geometry.Polygon(
            [[[92.29421659505181, 21.37188145101792],
              [92.29420854842476, 21.37153176331861],
              [92.2952948430758, 21.371529265546325],
              [92.29529752528481, 21.371888944316638],
              [92.29426219260506, 21.371876455485246]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry57 = /* color: #9999ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[92.88566916382126, 20.60761664095934],
              [92.8860191920977, 20.607632959740496],
              [92.88600846326165, 20.607840082580175],
              [92.88568391597084, 20.607836316712888]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry58 = /* color: #ffff99 */ee.Feature(
        ee.Geometry.Polygon(
            [[[92.92127280628495, 20.598933546264245],
              [92.92170464193634, 20.59914319164842],
              [92.92162283456139, 20.59929509021969],
              [92.92114808356575, 20.5991231058756]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry59 = /* color: #99ffff */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.9594539920073, 20.054550692724213],
              [93.96076559221558, 20.05456329061101],
              [93.96077095663361, 20.055397268467228],
              [93.9594727674704, 20.05540230759489]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry60 = /* color: #ff99ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.87012570297532, 20.044468279750834],
              [93.87112080251984, 20.04454891138687],
              [93.8710403362494, 20.045372863544408],
              [93.87006401216797, 20.0453249887667]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry61 = /* color: #d63000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.87213735973648, 20.0442956775158],
              [93.87271403467469, 20.044540092303706],
              [93.87256383096985, 20.04477442777407],
              [93.87200324928574, 20.044562769945152]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry62 = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.83451401388459, 20.05299988513702],
              [93.83556812202744, 20.05297720871421],
              [93.83558153307251, 20.053710411392423],
              [93.83448719179444, 20.053717970165092]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry63 = /* color: #0b4a8b */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.74515622055344, 20.028594380174873],
              [93.74671726620011, 20.028652340023356],
              [93.74671458399109, 20.02950913529018],
              [93.74512671625428, 20.029463775657863]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry64 = /* color: #ffc82d */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.59534143602662, 20.145603179101116],
              [93.59598248398117, 20.145618287776074],
              [93.5959690729361, 20.146106800811715],
              [93.59534948265366, 20.14608665597448]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry65 = /* color: #00ffff */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.51291447078995, 20.159549122999405],
              [93.51367085373215, 20.159612070178976],
              [93.51362257396988, 20.160030038807218],
              [93.51289569532685, 20.159987234842518]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry66 = /* color: #bf04c2 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.36494498646073, 18.861342699880673],
              [94.36579256450943, 18.861347776249172],
              [94.36580597555451, 18.861888408614607],
              [94.36495571529679, 18.861890946790613]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry67 = /* color: #ff0000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.3924416521769, 18.8234572929303],
              [94.39320339953713, 18.823459831687366],
              [94.39320339953713, 18.823726400965544],
              [94.39245506322197, 18.82373909473015]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry68 = /* color: #00ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.77904190814309, 18.621533254024573],
              [93.77989485060982, 18.621525628650602],
              [93.77990289723687, 18.621891646215772],
              [93.77904727256112, 18.62189672978751]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry69 = /* color: #0000ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.9600856522303, 18.78860162424746],
              [93.96103515422158, 18.788594006398018],
              [93.9610405186396, 18.788957123504716],
              [93.96009101664833, 18.788957123504716]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry70 = /* color: #999900 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.38852830922417, 18.83467314741579],
              [94.3896870235186, 18.83469345611554],
              [94.3896870235186, 18.835147862630546],
              [94.38856049573235, 18.835140246889036]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry71 = /* color: #009999 */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.35007616078667, 18.770193355485844],
              [94.35385271107964, 18.770228909329223],
              [94.35382052457146, 18.772087856980864],
              [94.35025855099968, 18.772098015108426]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry72 = /* color: #ff00ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[92.26513340270333, 21.184566970060736],
              [92.26591660773568, 21.184561968163695],
              [92.26591124331765, 21.184834571305615],
              [92.26514413153939, 21.184832070361644]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry73 = /* color: #ff9999 */ee.Feature(
        ee.Geometry.Polygon(
            [[[92.73353829181008, 21.07417148856707],
              [92.73430540358834, 21.07417649418979],
              [92.73430003917031, 21.074724608859093],
              [92.73353560960106, 21.07471459765036]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry74 = /* color: #99ff99 */ee.Feature(
        ee.Geometry.Polygon(
            [[[92.7093554953318, 21.07928464434335],
              [92.70984633958153, 21.079294655244322],
              [92.70983829295449, 21.079557441153675],
              [92.70936890637688, 21.079554938432917]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry75 = /* color: #9999ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[92.72744431292824, 21.136415877655114],
              [92.72802903449349, 21.13642088117937],
              [92.72802903449349, 21.13678113448206],
              [92.72746308839135, 21.136773629213845]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry76 = /* color: #ffff99 */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.10751601254753, 20.969958019385423],
              [93.10832603967003, 20.9699655330697],
              [93.10829117095284, 20.97087719062591],
              [93.1075455168467, 20.970864667894933]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry77 = /* color: #99ffff */ee.Feature(
        ee.Geometry.Polygon(
            [[[93.73759105002694, 20.777045399580377],
              [93.73881413733773, 20.777070477370756],
              [93.73882486617379, 20.778078601095626],
              [93.73759641444497, 20.778078601095626]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry78 = /* color: #ff99ff */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.02393021380715, 18.315874252971142],
              [95.02402140891365, 18.31588189194341],
              [95.02402140891365, 18.315690917535903],
              [95.02430304086022, 18.31568073222825],
              [95.02430304086022, 18.315499942917693],
              [95.02459003722481, 18.315497396588032],
              [95.02459003722481, 18.31576985364988],
              [95.02439960038475, 18.315759668346868],
              [95.0244076470118, 18.316042310282857],
              [95.02421721017174, 18.316042310282857],
              [95.02421989238076, 18.316408980214753],
              [95.02393826043419, 18.316408980214753]]]),
        {
          "Class": "DDF",
          "system:index": "0"
        }),
    geometry79 = /* color: #d63000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.03431572711281, 18.289915079097163],
              [95.03514989411644, 18.28990234556783],
              [95.03517135178856, 18.290271617538913],
              [95.03432645594887, 18.290281804340765]]]),
        {
          "Class": "DDF",
          "system:index": "0"
        }),
    geometry80 = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.03857507502846, 18.26422455531446],
              [95.03913297450356, 18.26421181989927],
              [95.03912761008553, 18.264583693638052],
              [95.03859116828255, 18.2645862407157]]]),
        {
          "Class": "DDF",
          "system:index": "0"
        }),
    geometry81 = /* color: #0b4a8b */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.5623689810019, 18.175148086234877],
              [94.5629107872229, 18.174872860250826],
              [94.56407218372635, 18.17483463438538],
              [94.56407754814438, 18.17605785792682],
              [94.56247358715348, 18.176050212806302]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry82 = /* color: #ffc82d */ee.Feature(
        ee.Geometry.Polygon(
            [[[94.58977579271607, 18.101124713622628],
              [94.59095864689164, 18.101127263088127],
              [94.59095060026459, 18.102129200153797],
              [94.59005742466263, 18.101902298877214]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry83 = /* color: #00ffff */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.04088982140831, 18.22065633401904],
              [95.04221483266167, 18.220641047689913],
              [95.04220946824364, 18.22118625926545],
              [95.04088982140831, 18.22120664097349]]]),
        {
          "Class": "DDF",
          "system:index": "0"
        }),
    geometry84 = /* color: #bf04c2 */ee.Feature(
        ee.Geometry.Polygon(
            [[[95.05389317071251, 18.14006092160689],
              [95.05848511254601, 18.14006092160689],
              [95.05851729905419, 18.14369051554869],
              [95.0541077474337, 18.143710906313082]]]),
        {
          "Class": "DDF",
          "system:index": "0"
        }),
    image = ee.Image("users/pawlokdass/Sumalika/FT_Ayeyarwady_Rakhine_Run1");
//var Palette = ['#008000', '#00FF00', '#808000', '#FFFF00', '#FF00FF', '6a2325', 'c3aa69']; //green, lime, olive,yellow,fuchsia
//Map.addLayer(image, {palette: Palette, min: 0, max: 7}, 'classification');

//----------------------------------------------------ROI--------------------------------------------

var state = ee.FeatureCollection(table);
//print(state);

var roi = state;
Map.centerObject(roi,8);
//print(roi);

var empty = ee.Image().byte();
var outline_roi = empty.paint({
  featureCollection: roi,
  color: 'AREA',
  width: 4
});

var palette = ['FF0000'];
Map.addLayer(outline_roi, {palette: palette, max: 14}, 'different color edges');

var train =ee.FeatureCollection([geometry,geometry2,geometry3,geometry4,geometry5,
                                 geometry6,geometry7,geometry8,geometry9,geometry10,
                                 geometry11,geometry12,geometry13,geometry14,geometry15,
                                 geometry16,geometry17,geometry18,geometry19,geometry20,
                                 geometry21,geometry22,geometry23,geometry24,geometry25,
                                 geometry26,geometry27,geometry28,geometry29,geometry30,
                                 geometry31,geometry32,geometry33,geometry34,geometry35,
                                 geometry36,geometry37,geometry38,geometry39,geometry40,
                                 geometry41,geometry42,geometry43,geometry44,geometry45,
                                 geometry46,geometry47,geometry48,geometry49,geometry50,
                                 geometry51,geometry52,geometry53,geometry54,geometry55,
                                 geometry56,geometry57,geometry58,geometry59,geometry60,
                                 geometry61,geometry62,geometry63,geometry64,geometry65,
                                 geometry66,geometry67,geometry68,geometry69,geometry70,
                                 geometry71,geometry72,geometry73,geometry74,geometry75,
                                 geometry76,geometry77,geometry78,geometry79,geometry80,
                                 geometry81,geometry82,geometry83]);
                                 
print(train, 'Train');

var training = train.remap(['Mangrove','MDF','Coconut', 'Rubber', 'Bamboo', 'Upland_Evergreen', 'Lowland_Evergreen', 'DDF'], [0, 1, 2, 3, 4, 5, 6,7], 'Class');
print(training, 'Training');


var mangrove = training.filter(ee.Filter.eq('Class', 0));//.limit(2);
var mangrove_size = mangrove.size();
print(mangrove_size,'mangrove_size');

var mdf = training.filter(ee.Filter.eq('Class', 1));//.limit(10);
var mdf_size = mdf.size();
print(mdf_size,'mdf_size');

var coconut = training.filter(ee.Filter.eq('Class', 2));//.limit(1);
var coconut_size = coconut.size();
print(coconut_size,'coconut_size');


var rubber = training.filter(ee.Filter.eq('Class', 3));//.limit(1);
var rubber_size = rubber.size();
print(rubber_size,'rubber_size');

var bamboo = training.filter(ee.Filter.eq('Class', 4));//.limit(5);
var bamboo_size = bamboo.size();
print(bamboo_size,'bamboo_size');

var up_evg = training.filter(ee.Filter.eq('Class', 5));//.limit(6);
var up_evg_size = up_evg.size();
print(up_evg_size,'up_evg_size');

var low_evg = training.filter(ee.Filter.eq('Class', 6));//.limit(1);
var low_evg_size = low_evg.size();
print(low_evg_size,'low_evg_size');

var ddf = training.filter(ee.Filter.eq('Class', 7));//.limit(4);
var ddf_size = ddf.size();
print(ddf_size,'ddf_size');


//var training1 = mangrove.merge(mdf).merge(rubber).merge(bamboo).merge(up_evg).merge(ind).merge(ddf).merge(op);
//print(training1);


//----------------------------------------------------TP_PCT----------------------------------------------
//Load TP_PCT_Map
var tc = ee.Image(tcc);
var tc_gte25 = tc.gte(25);
var tc_gte10 = tc.gte(10);
//Map.addLayer(tc.clip(roi), {}, 'PCT');
Map.addLayer(tc_gte10.updateMask(tc_gte10), {}, 'tc_gte10');
Map.addLayer(tc_gte25.updateMask(tc_gte25), {}, 'tc_gte25');


//---------------------------------------------------Rainfall----------------------------------------------
//Load CHIRPS data
//-----------------------------------------------------SRTM------------------------------------------------
// Load SRTM
var dataset = ee.Image('CGIAR/SRTM90_V4');
var elevation = dataset.select('elevation').unmask(0);
var slope = ee.Terrain.slope(elevation);

Map.addLayer(dataset, {}, 'elevation');
//print(elevation);

var elev5m = elevation.lte(5);
//Map.addLayer(elev5m, {}, 'elev5m');
//-----------------------------------------------------GEDI-------------------------------------------
// Load GEDI
var gedi = ee.ImageCollection('users/potapovpeter/GEDI_V27');
//print(gedi);

var gedi_sasia= gedi.filterMetadata('system:index', 'equals', 'GEDI_SASIA_v27').first();
//print(gedi_sasia,"gedi_sasia");

var gedi_roi  = ee.Image(gedi_sasia).rename('ht');
//print(gedi_roi);
//Map.addLayer(gedi_roi.clip(roi), {min:0, max:25}, 'gedi_roi');


//----------------------------------------------------Radar--Processing---------------------------------------

function toDB(img) {
  return ee.Image(img).log10().multiply(10.0);
}

// The RL speckle filter
function RefinedLee(img) {
  // img must be in natural units, i.e. not in dB!
  // Set up 3x3 kernels 
  var weights3 = ee.List.repeat(ee.List.repeat(1,3),3);
  var kernel3 = ee.Kernel.fixed(3,3, weights3, 1, 1, false);

  var mean3 = img.reduceNeighborhood(ee.Reducer.mean(), kernel3);
  var variance3 = img.reduceNeighborhood(ee.Reducer.variance(), kernel3);

  // Use a sample of the 3x3 windows inside a 7x7 windows to determine gradients and directions
  var sample_weights = ee.List([[0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0], [0,1,0,1,0,1,0], [0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0]]);

  var sample_kernel = ee.Kernel.fixed(7,7, sample_weights, 3,3, false);

  // Calculate mean and variance for the sampled windows and store as 9 bands
  var sample_mean = mean3.neighborhoodToBands(sample_kernel); 
  var sample_var = variance3.neighborhoodToBands(sample_kernel);

  // Determine the 4 gradients for the sampled windows
  var gradients = sample_mean.select(1).subtract(sample_mean.select(7)).abs();
  gradients = gradients.addBands(sample_mean.select(6).subtract(sample_mean.select(2)).abs());
  gradients = gradients.addBands(sample_mean.select(3).subtract(sample_mean.select(5)).abs());
  gradients = gradients.addBands(sample_mean.select(0).subtract(sample_mean.select(8)).abs());

  // And find the maximum gradient amongst gradient bands
  var max_gradient = gradients.reduce(ee.Reducer.max());

  // Create a mask for band pixels that are the maximum gradient
  var gradmask = gradients.eq(max_gradient);

  // duplicate gradmask bands: each gradient represents 2 directions
  gradmask = gradmask.addBands(gradmask);

  // Determine the 8 directions
  var directions = sample_mean.select(1).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(7))).multiply(1);
  directions = directions.addBands(sample_mean.select(6).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(2))).multiply(2));
  directions = directions.addBands(sample_mean.select(3).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(5))).multiply(3));
  directions = directions.addBands(sample_mean.select(0).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(8))).multiply(4));
  // The next 4 are the not() of the previous 4
  directions = directions.addBands(directions.select(0).not().multiply(5));
  directions = directions.addBands(directions.select(1).not().multiply(6));
  directions = directions.addBands(directions.select(2).not().multiply(7));
  directions = directions.addBands(directions.select(3).not().multiply(8));

  // Mask all values that are not 1-8
  directions = directions.updateMask(gradmask);

  // "collapse" the stack into a singe band image (due to masking, each pixel has just one value (1-8) in it's directional band, and is otherwise masked)
  directions = directions.reduce(ee.Reducer.sum());  

  //var pal = ['ffffff','ff0000','ffff00', '00ff00', '00ffff', '0000ff', 'ff00ff', '000000'];
  //Map.addLayer(directions.reduce(ee.Reducer.sum()), {min:1, max:8, palette: pal}, 'Directions', false);

  var sample_stats = sample_var.divide(sample_mean.multiply(sample_mean));

  // Calculate localNoiseVariance
  var sigmaV = sample_stats.toArray().arraySort().arraySlice(0,0,5).arrayReduce(ee.Reducer.mean(), [0]);

  // Set up the 7*7 kernels for directional statistics
  var rect_weights = ee.List.repeat(ee.List.repeat(0,7),3).cat(ee.List.repeat(ee.List.repeat(1,7),4));

  var diag_weights = ee.List([[1,0,0,0,0,0,0], [1,1,0,0,0,0,0], [1,1,1,0,0,0,0], 
    [1,1,1,1,0,0,0], [1,1,1,1,1,0,0], [1,1,1,1,1,1,0], [1,1,1,1,1,1,1]]);

  var rect_kernel = ee.Kernel.fixed(7,7, rect_weights, 3, 3, false);
  var diag_kernel = ee.Kernel.fixed(7,7, diag_weights, 3, 3, false);

  // Create stacks for mean and variance using the original kernels. Mask with relevant direction.
  var dir_mean = img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel).updateMask(directions.eq(1));
  var dir_var = img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel).updateMask(directions.eq(1));

  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel).updateMask(directions.eq(2)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel).updateMask(directions.eq(2)));

  // and add the bands for rotated kernels
  for (var i=1; i<4; i++) {
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
  }

  // "collapse" the stack into a single band image (due to masking, each pixel has just one value in it's directional band, and is otherwise masked)
  dir_mean = dir_mean.reduce(ee.Reducer.sum());
  dir_var = dir_var.reduce(ee.Reducer.sum());

  // A finally generate the filtered value
  var varX = dir_var.subtract(dir_mean.multiply(dir_mean).multiply(sigmaV)).divide(sigmaV.add(1.0));

  var b = varX.divide(dir_var);

  var result = dir_mean.add(b.multiply(img.subtract(dir_mean)));
  result= result.arrayFlatten([['sum']]);
  return(result);
}

//-----------------------------------------------------PALSAR-----------------------------------------------
//Load PALSAR

var palsar = ee.ImageCollection('JAXA/ALOS/PALSAR/YEARLY/SAR')
                  .filterBounds(roi)
                  .filterDate('2017-01-01', '2018-01-01')
                  .select('HH', 'HV');
//print(palsar,'PALSAR');

var pal_HH = palsar.select('HH');
//print(pal_HH, 'pal_HH');
//Map.addLayer(pal_HH, {},'pal_HH');

// Convert DN to gamma_nought in natural values

function toGamma(img) { 
  return ee.Image(img).pow(2).divide(ee.Number(10.0).pow(8.3));
}

var palsar_gn = palsar.map(function(img) { return ee.Image(img).pow(2).divide(ee.Number(10.0).pow(8.3))});

var pal_HH_gn = palsar_gn.select('HH').first();
var pal_HV_gn = palsar_gn.select('HV').first();
var pal_HH_HV = pal_HH_gn.divide(pal_HV_gn);

//Map.addLayer(pal_HH, {min:-25, max:0}, "pal_HH");


var pal_HH_urf = toDB(pal_HH_gn);
//print(pal_HH_urf,'pal_HH_urf');
//Map.addLayer(pal_HH_urf.clip(roi),{min:-25.0, max:0.0}, "pal_HH_urf");

var pal_HH_rf = toDB(RefinedLee(pal_HH_gn)).rename('HH');
//print(pal_HH_rf,'pal_HH_rf');
//Map.addLayer(pal_HH_rf.clip(roi),{}, "pal_HH_rf");

var pal_HV_rf = toDB(RefinedLee(pal_HV_gn)).rename('HV');
//print(pal_HV_rf, 'pal_HV_rf');
//Map.addLayer(pal_HV_rf.clip(roi),{min:-25.0, max:0.0}, "pal_HV_rf");

var pal_HH_HV = (pal_HH_rf.divide(pal_HV_rf)).rename('HH_HV');
//print(pal_HH_HV, 'pal_HH_HV');
//Map.addLayer(pal_HH_HV.clip(roi),{min:-1.0, max:1.0}, "pal_HH_HV");

var glcmHH = pal_HH_gn.unitScale(0,1).multiply(255).toByte().glcmTexture({size:3});
//print(glcmHH, 'glcmHH');

var glcmHV = pal_HV_gn.unitScale(0,1).multiply(255).toByte().glcmTexture({size:3});
var glcmHH_HV =pal_HH_HV.unitScale(0,1).multiply(255).toByte().glcmTexture({size:3});

var pal_variables = pal_HH_gn.addBands(pal_HV_gn).addBands(pal_HH_HV)
                             .addBands(glcmHH).addBands(glcmHV).addBands(glcmHH_HV);

//----------------------------------------------------Sentinel-1----------------------------------------------------
//Load Sentinel-1
var s1_col = ee.ImageCollection('COPERNICUS/S1_GRD_FLOAT')
                            .filterBounds(roi)
                            .filter(ee.Filter.eq('instrumentMode', 'IW'))
                            .filterDate('2018-05-01', '2020-04-30')
                            .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
                            .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                            .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));
                            
//print(s1_col, 'S1_col');

var s1_col_VV = s1_col.select('VV');
var s1_col_VH = s1_col.select('VH');

//Map.addLayer(S1_col.select('VV'), {}, 'S1_col');
//Map.addLayer(S1_col.select('VH'), {}, 'S1_col');

// Functions to convert from/to dB
function toNatural(img) {
  return ee.Image(10.0).pow(img.select(0).divide(10.0));
}

// convert sigma naught to gamma naught for S1

//function toGamma0(image) {
//  return image.select(1).subtract(image.select('angle').multiply(Math.PI/180.0).cos().log10().multiply(10.0));
//}

//Function applies Refined Lee to all images in collection

var s1_VV_rf = s1_col_VV.map(function(image){
  return toDB(RefinedLee(toNatural(image))).set("system:time_start", image.get('system:time_start'));
});

//print(s1_VV_rf, "s1_VV_rf");

//1 month VV composite from speckle filtered images

var months = ee.List.sequence(1, 12, 1);
//print(months);
var mon = ee.List(['January','February','March','April','May','June','July','August','September','October','November','December']);
var s1_VV_mon_composites = months.map(function(m) {
  var n = ee.Number(m).subtract(1);
  var s1_VV_image = s1_col_VV.filter(ee.Filter.calendarRange({
    start: m, 
    end: ee.Number(m).add(0), 
    field: 'month'
  })).median()
  .set('month', mon.get(n))
  .select(0).rename('VV_rf');
  
  var glcmVV = (s1_VV_image.select(0)).unitScale(0,1).multiply(255).toByte().glcmTexture({size:3});
  
  return s1_VV_image.addBands(glcmVV).float();
});

//print(s1_VV_mon_composites, "s1_VV_mon_composites");
//print(s1_VV_mon_composites.get(0),"s1_VV_mon_composites.get(0)");

var s1_VV_variables = ee.Image(s1_VV_mon_composites.get(0))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(1)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(2)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(3)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(4)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(5)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(6)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(7)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(8)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(9)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(10)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(11)));


var s1_VH_rf = s1_col_VH.map(function(image){
  return toDB(RefinedLee(toNatural(image))).set("system:time_start", image.get('system:time_start'));
});

//print(s1_VH_rf, "s1_VH_rf");


//1 month VH composite from speckle filtered images

var months = ee.List.sequence(1, 12, 1);
//print(months);
var mon = ee.List(['January','February','March','April','May','June','July','August','September','October','November','December']);
var s1_VH_mon_composites = months.map(function(m) {
  var n = ee.Number(m).subtract(1);
  var s1_VH_image = s1_col_VH.filter(ee.Filter.calendarRange({
    start: m, 
    end: ee.Number(m).add(0), 
    field: 'month'
  })).median()
  .set('month', mon.get(n))
  .select(0).rename('VH_rf');
  
  var glcmVH = (s1_VH_image.select(0)).unitScale(0,1).multiply(255).toByte().glcmTexture({size:3});
  
  return s1_VH_image.addBands(glcmVH).float();
});

//print(s1_VH_mon_composites, "s1_VH_mon_composites");
//print(s1_VH_mon_composites.get(0),"s1_VH_mon_composites.get(0)");

var s1_VH_variables = ee.Image(s1_VH_mon_composites.get(0))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(1)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(2)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(3)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(4)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(5)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(6)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(7)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(8)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(9)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(10)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(11)));
                                           

//--------------------------------------------------- Sentinel-2------------------------------------------------------

//Load Sentinel-2 SR
// Function to mask clouds using the Sentinel-2 QA band
// @param {ee.Image} image Sentinel-2 image
// @return {ee.Image} cloud masked Sentinel-2 image
 //
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  var prop = image.toDictionary();

  return image.updateMask(mask).divide(10000).set("system:time_start", image.get('system:time_start'));
}

var s2collection = ee.ImageCollection('COPERNICUS/S2_SR')
                  .filterBounds(roi)
                  .filterDate('2015-04-01', '2020-04-30')
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',50))
                  .map(maskS2clouds)
                  .select('B[2-8]', 'B8A', 'B11', 'B12');
//print(s2collection.first());
//print(s2collection.size());

var s2_med = s2collection.median();
//Map.addLayer(s2_med, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 's2_med');
var s2_med_ndvi =s2_med.normalizedDifference(['B8A', 'B4']);
var s2_water_mask =s2_med_ndvi.lte(0);

//Map.addLayer(s2_water_mask.clip(roi), {}, "s2_water_mask");

//1 month composite

var months = ee.List.sequence(1, 12, 1);
//print(months);
var mon = ee.List(['January','February','March','April','May','June','July','August','September','October','November','December']);
var s2_mon_composites = months.map(function(m) {
  var n = ee.Number(m).subtract(1);
  var s2_img_all_10m = s2collection.filter(ee.Filter.calendarRange({
    start: m, 
    end: ee.Number(m).add(0), 
    field: 'month'
  })).median()
  .set('month', mon.get(n));

  return s2_img_all_10m.float();
});

// Map the function over the collection and display the result.
//print(s2_mon_composites,'s2_mon_composites');

var check0 = ee.Image(s2_mon_composites.get(0));
var check1 = ee.Image(s2_mon_composites.get(1));
var check2 = ee.Image(s2_mon_composites.get(2));
var check3 = ee.Image(s2_mon_composites.get(3));
var check4 = ee.Image(s2_mon_composites.get(4));
var check5 = ee.Image(s2_mon_composites.get(5));
var check6 = ee.Image(s2_mon_composites.get(6));
var check7 = ee.Image(s2_mon_composites.get(7));
var check8 = ee.Image(s2_mon_composites.get(8));
var check9 = ee.Image(s2_mon_composites.get(9));
var check10 = ee.Image(s2_mon_composites.get(10));
var check11 = ee.Image(s2_mon_composites.get(11));

Map.addLayer(check0, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checkjan');
Map.addLayer(check1, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checkfeb');
Map.addLayer(check2, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checkmar');
Map.addLayer(check3, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checkapr');
Map.addLayer(check10, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checknov');
Map.addLayer(check11, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checkdec');

var comp_list = ee.List([check0,check1,check2,check3,check10,check11]);

var image_indices = ee.List([]);
var i;
for (i = 0; i < 6; i++) {
  var image = ee.Image(comp_list.get(i));
  
  var b2 = image.select('B2');
  var b3 = image.select('B3');
  var b4 = image.select('B4');
  var b5 = image.select('B5');
  var b6 = image.select('B6');
  var b7 = image.select('B7');
  var b8 = image.select('B8');
  var b8a = image.select('B8A');
  var b11 = image.select('B11');
  var b12 = image.select('B12');
  var si_1 = (b2.divide(b3).rename('SI_1'));
  var si_2 = (b2.divide(b4).rename('SI_2'));
  var si_3 = (b2.divide(b5).rename('SI_3'));
  var si_4 = (b2.divide(b6).rename('SI_4'));
  var si_5 = (b2.divide(b7).rename('SI_5'));
  var si_6 = (b2.divide(b8).rename('SI_6'));
  var si_7 = (b2.divide(b8a).rename('SI_7'));
  var si_8 = (b2.divide(b11).rename('SI_8'));
  var si_9 = (b2.divide(b12).rename('SI_9'));
  
  var si_10 = (b3.divide(b4).rename('SI_10'));
  var si_11 = (b3.divide(b5).rename('SI_11'));
  var si_12 = (b3.divide(b6).rename('SI_12'));
  var si_13 = (b3.divide(b7).rename('SI_13'));
  var si_14 = (b3.divide(b8).rename('SI_14'));
  var si_15 = (b3.divide(b8a).rename('SI_15'));
  var si_16 = (b3.divide(b11).rename('SI_16'));
  var si_17 = (b3.divide(b12).rename('SI_17'));
  
  var si_18 = (b4.divide(b5).rename('SI_18'));
  var si_19 = (b4.divide(b6).rename('SI_19'));
  var si_20 = (b4.divide(b7).rename('SI_20'));
  var si_21 = (b4.divide(b8).rename('SI_21'));
  var si_22 = (b4.divide(b8a).rename('SI_22'));
  var si_23 = (b4.divide(b11).rename('SI_23'));
  var si_24 = (b4.divide(b12).rename('SI_24'));
  
  var si_25 = (b5.divide(b6).rename('SI_25'));
  var si_26 = (b5.divide(b7).rename('SI_26'));
  var si_27 = (b5.divide(b8).rename('SI_27'));
  var si_28 = (b5.divide(b8a).rename('SI_28'));
  var si_29 = (b5.divide(b11).rename('SI_29'));
  var si_30 = (b5.divide(b12).rename('SI_30'));
  
  var si_31 = (b6.divide(b7).rename('SI_31'));
  var si_32 = (b6.divide(b8).rename('SI_32'));
  var si_33 = (b6.divide(b8a).rename('SI_33'));
  var si_34 = (b6.divide(b11).rename('SI_34'));
  var si_35 = (b6.divide(b12).rename('SI_35'));
    
  var si_36 = (b7.divide(b8).rename('SI_36'));
  var si_37 = (b7.divide(b8a).rename('SI_37'));
  var si_38 = (b7.divide(b11).rename('SI_38'));
  var si_39 = (b7.divide(b12).rename('SI_39'));
    
  var si_40 = (b8.divide(b8a).rename('SI_40'));
  var si_41 = (b8.divide(b11).rename('SI_41'));
  var si_42 = (b8.divide(b12).rename('SI_42'));
    
  var si_43 = (b8a.divide(b11).rename('SI_43'));
  var si_44 = (b8a.divide(b12).rename('SI_44'));
    
  var si_45 = (b11.divide(b12).rename('SI_45'));
    

  var nd_1 = image.normalizedDifference(['B3', 'B2']).rename('ND_1');
  var nd_2 = image.normalizedDifference(['B4', 'B2']).rename('ND_2');
  var nd_3 = image.normalizedDifference(['B8A', 'B2']).rename('ND_3');
  var nd_4 = image.normalizedDifference(['B4', 'B3']).rename('ND_4');
  var nd_5 = image.normalizedDifference(['B8A', 'B3']).rename('ND_5');
    
  var nd_6 = image.normalizedDifference(['B5', 'B2']).rename('ND_6');
  var nd_7 = image.normalizedDifference(['B6', 'B2']).rename('ND_7');
  var nd_8 = image.normalizedDifference(['B7', 'B2']).rename('ND_8');
  var nd_9 = image.normalizedDifference(['B8', 'B2']).rename('ND_9');
  var nd_10 = image.normalizedDifference(['B11', 'B2']).rename('ND_10');
  var nd_11 = image.normalizedDifference(['B12', 'B2']).rename('ND_11');
  
  var nd_12 = image.normalizedDifference(['B5', 'B3']).rename('ND_12');
  var nd_13 = image.normalizedDifference(['B6', 'B3']).rename('ND_13');
  var nd_14 = image.normalizedDifference(['B7', 'B3']).rename('ND_14');
  var nd_15 = image.normalizedDifference(['B8', 'B3']).rename('ND_15');
  var nd_16 = image.normalizedDifference(['B11', 'B3']).rename('ND_16');
  var nd_17 = image.normalizedDifference(['B12', 'B3']).rename('ND_17');
    
  var nd_18 = image.normalizedDifference(['B5', 'B4']).rename('ND_18');
  var nd_19 = image.normalizedDifference(['B6', 'B4']).rename('ND_19');
  var nd_20 = image.normalizedDifference(['B7', 'B4']).rename('ND_20');
  var nd_21 = image.normalizedDifference(['B8', 'B4']).rename('ND_21');
  var nd_22 = image.normalizedDifference(['B11', 'B4']).rename('ND_22');
  var nd_23 = image.normalizedDifference(['B12', 'B4']).rename('ND_23');
  var nd_24 = image.normalizedDifference(['B6', 'B5']).rename('ND_24');
  var nd_25 = image.normalizedDifference(['B7', 'B5']).rename('ND_25');
  var nd_26 = image.normalizedDifference(['B8A', 'B5']).rename('ND_26');
  var nd_27 = image.normalizedDifference(['B8', 'B5']).rename('ND_27');
  var nd_28 = image.normalizedDifference(['B11', 'B5']).rename('ND_28');
  var nd_29 = image.normalizedDifference(['B12', 'B5']).rename('ND_29');
  
  var nd_30 = image.normalizedDifference(['B7', 'B6']).rename('ND_30');
  var nd_31 = image.normalizedDifference(['B8A', 'B6']).rename('ND_31');
  var nd_32 = image.normalizedDifference(['B8', 'B6']).rename('ND_32');
  var nd_33 = image.normalizedDifference(['B11', 'B6']).rename('ND_33');
  var nd_34 = image.normalizedDifference(['B12', 'B6']).rename('ND_34');
  
  var nd_35 = image.normalizedDifference(['B8A', 'B7']).rename('ND_35');
  var nd_36 = image.normalizedDifference(['B8', 'B7']).rename('ND_36');
  var nd_37 = image.normalizedDifference(['B11', 'B7']).rename('ND_37');
  var nd_38 = image.normalizedDifference(['B12', 'B7']).rename('ND_38');
    
  var nd_39 = image.normalizedDifference(['B8', 'B8A']).rename('ND_39');
  var nd_40 = image.normalizedDifference(['B11', 'B8A']).rename('ND_40');
  var nd_41 = image.normalizedDifference(['B12', 'B8A']).rename('ND_41');
    
  var nd_42 = image.normalizedDifference(['B11', 'B8']).rename('ND_42');
  var nd_43 = image.normalizedDifference(['B12', 'B8']).rename('ND_43');
    
  var nd_44 = image.normalizedDifference(['B12', 'B11']).rename('ND_44');
      

  
  var ndvi = image.normalizedDifference(['B8A', 'B4']).rename('NDVI');
    
  var evi = image.expression('2.5 * ((nir - red) / (nir + 6 * red - 7.5 * blue + 1))',{
       'nir': image.select('B8A'), 'red': image.select('B4'), 'blue': image.select('B2')});
    
    
  var savi = image.expression('1.5 * ((nir - red) / (nir + red + 0.5))',{
    'nir': image.select('B8A'), 'red': image.select('B4')});
        
  var wri = (b3.add(b4).divide(b8a.add(b11)).rename('WRI'));
    
  var awei = image.expression('4 * (green - swir1) - (0.25 * nir + 2.75 * swir1)',{
    'green': image.select('B3'), 'swir1': image.select('B11'), 'nir': image.select('B8A')});
  
  var ccci = image.expression('((nir - vre1) / (nir + vre2)) / ((nir - red) / (nir + red))', {
      'nir': image.select('B8A'), 'red': image.select('B4'),'vre1': image.select('B5'), 
      'vre2': image.select('B6')});
      
  var s2rep = image.expression('705.0 + 35.0 * ((((red + vre3) / 2.0) - vre1) / (vre2 - vre1))',{
    'red': image.select('B4'),'vre1': image.select('B5'), 'vre2': image.select('B6'),
    'vre3': image.select('B7')});
    
  var ireci = image.expression('(nir - red)/(vre1/vre2)', { 
    'nir': image.select('B8A'), 'red': image.select('B4'),'vre1': image.select('B5'), 
    'vre2': image.select('B6')});

  
  var glcm_b = b2.multiply(255).int().glcmTexture({size:3});
  var glcm_g = b3.multiply(255).int().glcmTexture({size:3});
  var glcm_r = b4.multiply(255).int().glcmTexture({size:3});
  var glcm_nir = b8.multiply(255).int().glcmTexture({size:3});
  var glcm_swir1 = b11.multiply(255).int().glcmTexture({size:3});
  var glcm_swir2 = b12.multiply(255).int().glcmTexture({size:3});
  var glcm_vre1 = b5.multiply(255).int().glcmTexture({size:3});
  var glcm_vre2 = b6.multiply(255).int().glcmTexture({size:3});
  var glcm_vre3 = b7.multiply(255).int().glcmTexture({size:3});
  var glcm_nnir = b8a.multiply(255).int().glcmTexture({size:3});
  
 
  var image = image
               .addBands(si_1)
               .addBands(si_2)
               .addBands(si_3)
               .addBands(si_4)
               .addBands(si_5)
               .addBands(si_6)
              
               .addBands(si_7)
               .addBands(si_8)
               .addBands(si_9)
               .addBands(si_10)
              
               .addBands(si_11)
               .addBands(si_12)
             
               
               .addBands(si_13)
               .addBands(si_14)
               .addBands(si_15)
               .addBands(si_16)
              
               .addBands(si_17)
               .addBands(si_18)
               
               
               .addBands(si_19)
               .addBands(si_20)
               .addBands(si_21)
               .addBands(si_22)
             
               .addBands(si_23)
               .addBands(si_24)
               
               
               .addBands(si_25)
               .addBands(si_26)
               .addBands(si_27)
               .addBands(si_28)
               
               .addBands(si_31)
               .addBands(si_32)
               .addBands(si_33)
               .addBands(si_34)
               .addBands(si_35)
               .addBands(si_36)
               .addBands(si_37)
               .addBands(si_38)
               .addBands(si_39)
               .addBands(si_40)
               
               .addBands(si_41)
               .addBands(si_42)
               
               .addBands(si_43)
               .addBands(si_44)
               
               .addBands(si_45)
               .addBands(nd_1)
               .addBands(nd_2)
               .addBands(nd_3)
               .addBands(nd_4)
               .addBands(nd_5)
              
               .addBands(nd_6)
               .addBands(nd_7)
               .addBands(nd_8)
               .addBands(nd_9)
             
               .addBands(nd_10)
               .addBands(nd_11)
               
               .addBands(nd_12)
               .addBands(nd_13)
               .addBands(nd_14)
               .addBands(nd_15)
              
               .addBands(nd_16)
               .addBands(nd_17)
               
               
               .addBands(nd_18)
               .addBands(nd_19)
               .addBands(nd_20)
               .addBands(nd_21)
              
               .addBands(nd_22)
               .addBands(nd_23)
               
               .addBands(nd_24)
               .addBands(nd_25)
               .addBands(nd_26)
               .addBands(nd_27)
               .addBands(nd_28)
               .addBands(nd_29)
               .addBands(nd_30)
               .addBands(nd_31)
               .addBands(nd_32)
               .addBands(nd_33)
               .addBands(nd_34)
               .addBands(nd_35)
               .addBands(nd_36)
               .addBands(nd_37)
               .addBands(nd_38)
               .addBands(nd_39)
               
               .addBands(nd_40)
               .addBands(nd_41)
               
               .addBands(nd_42)
               .addBands(nd_43)
               
               .addBands(nd_44)
               .addBands(ndvi)
               .addBands(evi.rename('EVI'))
               .addBands(savi.rename('SAVI'))
               .addBands(wri)
               .addBands(awei.rename('AWEI'))
               
               .addBands(ccci.rename('CCC1'))
               .addBands(s2rep.rename('S2REP'))
               .addBands(ireci.rename('IRECI'))
               
               .addBands(glcm_b)
               .addBands(glcm_g)
               .addBands(glcm_r)
               .addBands(glcm_nir)
               .addBands(glcm_swir1)
               .addBands(glcm_swir2)
               
               .addBands(glcm_vre1)
               .addBands(glcm_vre2)
               .addBands(glcm_vre3)
               .addBands(glcm_nnir);
  //print(image,i);
  
  var image_indices = image_indices.add(image);
}

//print(image_indices);

//Monthly NDVI

var Jan_composite = ee.Image(image_indices.get(0));
var Jan_ndvi = Jan_composite.select ("NDVI");
var Jan_ndvi_mask = Jan_ndvi.gte(0.5);

var Feb_composite = ee.Image(image_indices.get(1));
var Feb_ndvi = Feb_composite.select ("NDVI");
var Feb_ndvi_mask = Feb_ndvi.gte(0.5);

var Mar_composite = ee.Image(image_indices.get(2));
var Mar_ndvi = Mar_composite.select ("NDVI");
var Mar_ndvi_mask = Mar_ndvi.gte(0.5);

var Apr_composite = ee.Image(image_indices.get(3));
var Apr_ndvi = Apr_composite.select ("NDVI");
var Apr_ndvi_mask = Apr_ndvi.gte(0.5);

var Nov_composite = ee.Image(image_indices.get(4));
var Nov_ndvi = Nov_composite.select ("NDVI");
var Nov_ndvi_mask = Nov_ndvi.gte(0.5);

var Dec_composite = ee.Image(image_indices.get(5));
var Dec_ndvi = Dec_composite.select ("NDVI");
var Dec_ndvi_mask = Dec_ndvi.gte(0.5);

var six_month_ndvi = Jan_ndvi_mask.add(Feb_ndvi_mask).add(Mar_ndvi_mask)
                                  .add(Apr_ndvi_mask).add(Nov_ndvi_mask).add(Dec_ndvi_mask);

var nf_mask = six_month_ndvi.gte(6);                  
//print(nf_mask,{},"nf_mask");
Map.addLayer(nf_mask.updateMask(nf_mask), {},"nf_mask");

var forest1 = tc_gte10.unmask(0);
Map.addLayer(forest1.updateMask(forest1), {},"forest1");

var forest2 = nf_mask.eq(1).unmask(0);
Map.addLayer(forest2.updateMask(forest2), {},"forest2");

var forest = forest1.add(forest2);
forest= forest.gte(1);
Map.addLayer(forest.updateMask(forest), {},"forest");

//---------------------------------------------------Build-Classification-Composite---------------------------------------

// convert list of images to single image
var class_composite = ee.Image(image_indices.get(0)).addBands(image_indices.get(1))
                                                    .addBands(image_indices.get(2))
                                                    .addBands(image_indices.get(3))
                                                    .addBands(image_indices.get(4))
                                                    .addBands(image_indices.get(5))
                                                    .addBands(gedi_roi)
                                                    .addBands(pal_variables)
                                                    .addBands(s1_VV_variables)
                                                    .addBands(s1_VH_variables)
                                                    .addBands(elevation)
                                                    .addBands(slope)
                                                    .updateMask(forest);
                                                    
print(class_composite);

var bands = class_composite.bandNames();
print(bands.size());
Map.addLayer(class_composite, {}, 'class_composite');

var sel_bands = ['ND_2_3','ND_6_3','SI_1_3','SI_9_4','SI_1_2','ND_11_4','SI_25_3','ND_38_1',
'ND_1_3','SI_3_3','ND_1_2','elevation','ND_11_3','SI_2_3','ND_10_3','ND_42_1','ND_23_5','B11_savg_5',
'B2_savg_4','ND_44_1','B2_3','ND_37_1','B7_contrast_3','ND_11_2','SI_8_4','SI_1_5','VV_rf_savg_3',
'SI_8_3','B11_1','B8A_inertia','HV_contrast','ND_1_1','ND_10_5','VV_rf_inertia_7','ND_40_1',
'HV_dvar','SI_43_3','SI_9_3','ND_8_3','ND_11','SI_6_1','ND_6','ND_23','ND_10','ND_23_3','ND_29_3',
'SI_9_2'];

bands= sel_bands;

class_composite = class_composite.select(bands);
print(class_composite.bandNames());
//----------------------------------------------------Train--Classifier----------------------------------------------------

//Training

var training = class_composite.sampleRegions({
      // Get the sample from the polygons FeatureCollection.
      collection: training,
      // Keep this list of properties from the polygons.
      properties: ['Class'],
      // Set the scale to get Sentinel pixels in the polygons.
      scale: 20,
      tileScale:16
      });
//print(training.limit(10));
print(training.size());

print(training.filter(ee.Filter.eq('Class', 0)).size());
print(training.filter(ee.Filter.eq('Class', 1)).size());
print(training.filter(ee.Filter.eq('Class', 2)).size());
print(training.filter(ee.Filter.eq('Class', 3)).size());
print(training.filter(ee.Filter.eq('Class', 4)).size());
print(training.filter(ee.Filter.eq('Class', 5)).size());
print(training.filter(ee.Filter.eq('Class', 6)).size());
print(training.filter(ee.Filter.eq('Class', 7)).size());


training = training.filter(ee.Filter.eq('Class', 0))
           .merge(training.filter(ee.Filter.eq('Class', 1)))
           .merge(training.filter(ee.Filter.eq('Class', 2)).limit(100))
           .merge(training.filter(ee.Filter.eq('Class', 3)))
           .merge(training.filter(ee.Filter.eq('Class', 4)))
           .merge(training.filter(ee.Filter.eq('Class', 5)))
           .merge(training.filter(ee.Filter.eq('Class', 6)))
           .merge(training.filter(ee.Filter.eq('Class', 7)));
           

print(training, 'train for IV');


var classifier = ee.Classifier.smileRandomForest(500)
                .train({
                  features: training, 
                  classProperty:'Class', 
                  inputProperties:bands,
                });
                
var dict = classifier.explain();
//print('Explain:',dict);    


var variable_importance = ee.FeatureCollection(ee.Feature(null, ee.Dictionary(dict).get('importance')));

/*
var chart =ui.Chart.feature.byProperty(variable_importance)
.setChartType('ColumnChart')
.setOptions({
title: 'Random Forest Variable Importance',
legend: {position: 'none'},
hAxis: {title: 'Bands'},
vAxis: {title: 'Importance'}
});
 
print(chart);
/**/

//----------------------------------------------Export--Important--Variables-------------------------------------------


// Export the FeatureCollection to a KML file.
Export.table.toDrive({
  collection: variable_importance,
  description:'RF_IV_Ayeyarwady_and_Rakhine',
  fileFormat: 'CSV'
});

//----------------------------------------------Selected--Bands-------------------------------------

//----------------------------------------------Generate--Classified--Map-----------------------------------------

var classified = class_composite.classify(classifier).unmask(100);

// Define a palette from the IGBP classification.

//var Palette = ['152106', '225129', '369b47', '30eb5b', '387242', '6a2325', 'c3aa69'];

var Palette = ['#008000', '#00FF00', '#808000', '#FFFF00', '#FF00FF', '6a2325', 'c3aa69']; //green, lime, olive,yellow,fuchsia

Map.addLayer(classified, {palette: Palette, min: 0, max: 7}, 'classification');

//Map.addLayer(image, {palette: Palette, min: 0, max: 7}, 'classification');
//---------------------------------------------Export---Maps--------------------------------------------------------

/*
// Export the image, specifying scale and region.
Export.image.toDrive({
  image: classified,
  description: 'FT_Ayeyarwady_Rakhine_Run1',
  scale: 20,
  region: roi,
  maxPixels:703470267 
});

/**/
