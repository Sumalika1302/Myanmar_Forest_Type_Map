var table = ee.FeatureCollection("users/BiswasS/Kachin"),
    tcc = ee.Image("users/BiswasS/tcc_myanmar_calib_2018_wgs84_bd"),
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.86072031235305, 23.74135999221205],
              [96.86322549557296, 23.74135999221205],
              [96.86320940231887, 23.742617058566992],
              [96.8607471344432, 23.742602327390887]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry2 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.77855352139083, 23.75328935776794],
              [96.77933672642318, 23.75330408773519],
              [96.77932599758712, 23.75373125606028],
              [96.77856156801788, 23.753723891101043]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry3 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.78051958059875, 23.766665936430833],
              [96.78169707035629, 23.766702757561294],
              [96.7816997525653, 23.767574187940752],
              [96.78054103827087, 23.767579097391135]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry4 = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.7842558977565, 23.771602329702947],
              [96.78426126217452, 23.771050032452102],
              [96.78534219240753, 23.77104266847291],
              [96.78533414578048, 23.771617057597545]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry5 = 
    /* color: #00ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.79945597624389, 23.778084896791402],
              [96.79945597624389, 23.777822262148426],
              [96.79984489655105, 23.777809989488585],
              [96.79984221434204, 23.778084896791402]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry6 = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.50507274841873, 23.81991312095192],
              [97.50635752653686, 23.819940112053203],
              [97.50636020874587, 23.82049220152972],
              [97.50506470179168, 23.820494655255484]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry7 = 
    /* color: #ff0000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.45443323731661, 23.80979965102143],
              [97.45443994283914, 23.809625422023284],
              [97.45463708520174, 23.809665911881737],
              [97.45462769747019, 23.80985118349722],
              [97.45448822260141, 23.809869587947897]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry8 = 
    /* color: #00ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.45339388132334, 23.79308241832395],
              [97.45341533899546, 23.79299897401021],
              [97.45371440530062, 23.793094689542045],
              [97.4537103819871, 23.79316708970518],
              [97.45364869117975, 23.79322231014147],
              [97.45342070341349, 23.79318181515715]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry9 = 
    /* color: #0000ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.35481063008547, 23.736143773809122],
              [97.35507885098696, 23.73616096103309],
              [97.35504398226976, 23.73649242848066],
              [97.35475966811418, 23.73645805411788]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry10 = 
    /* color: #999900 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.35519955039263, 23.73408374582964],
              [97.35520491481066, 23.733786647331474],
              [97.35539535165071, 23.733776825881947],
              [97.35539535165071, 23.734039549401718]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry11 = 
    /* color: #009999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.35046008706331, 23.732806954096038],
              [97.35043594718218, 23.732281501556947],
              [97.350583468678, 23.732023685284027],
              [97.35088655829668, 23.732053150026736],
              [97.35124060988664, 23.732286412338144],
              [97.35116550803423, 23.73280449871528]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry12 = 
    /* color: #ff00ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.34359229088068, 23.7288451370449],
              [97.34349573135614, 23.728351589577965],
              [97.34399730444193, 23.728162518660238],
              [97.34413141489267, 23.728670799595918]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry13 = 
    /* color: #ff9999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.33499581098795, 23.72095060894291],
              [97.3365193057084, 23.720989898602273],
              [97.33637983083963, 23.72141717288347],
              [97.33611160993814, 23.721539952590366],
              [97.33556712150812, 23.721677465724834],
              [97.33506823063135, 23.72158906444075]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry14 = 
    /* color: #99ff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.33874822139978, 23.712446574747354],
              [97.33914518833399, 23.712485866968677],
              [97.33911300182581, 23.712763367944873],
              [97.33894670486688, 23.712918080622202],
              [97.33860874653101, 23.712775646735498]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry15 = 
    /* color: #9999ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.33519697666407, 23.704914528514266],
              [97.33562076568842, 23.704894881264952],
              [97.33586216449976, 23.705223972300725],
              [97.33575487613916, 23.705474473876116],
              [97.3352398920083, 23.705474473876116]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry16 = 
    /* color: #ffff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.31488460779428, 23.724290187723952],
              [97.31614524603128, 23.72466342944973],
              [97.31571072817087, 23.726495245059457],
              [97.31464320898294, 23.726377381022917]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry17 = 
    /* color: #99ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.16916019201517, 23.683986076060435],
              [97.16957056999445, 23.684003270157156],
              [97.16955447674036, 23.684278375396858],
              [97.16916287422418, 23.684275919102646]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry18 = 
    /* color: #ff99ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.15934330702066, 23.682885649162785],
              [97.15957934141397, 23.682890561803465],
              [97.15957934141397, 23.682428772772106],
              [97.16030890226602, 23.682401753150558],
              [97.16029817342996, 23.683315504523012],
              [97.15937549352884, 23.683335155019954]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry19 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.08218956470728, 23.657123678167885],
              [97.08297813415766, 23.6571285917769],
              [97.08297276973963, 23.657492198332452],
              [97.08217883587122, 23.657492198332452]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry20 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.08132052898645, 23.657293197572546],
              [97.08170944929361, 23.657295654373893],
              [97.08170140266657, 23.657575729425407],
              [97.08130175352335, 23.65757081583318]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry21 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.08999747514963, 23.666068597635096],
              [97.09088260412454, 23.666083337453287],
              [97.09087723970651, 23.666621339679782],
              [97.08999747514963, 23.66661396980123]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry22 = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.12495738744974, 23.70856149792764],
              [97.12736064672708, 23.70850255781823],
              [97.1273284602189, 23.70991711309511],
              [97.12469989538431, 23.70988764334993]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry23 = 
    /* color: #00ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.10518146038294, 23.708153828292748],
              [97.10577154636621, 23.70816365167241],
              [97.10576081753015, 23.708527116200383],
              [97.10518146038294, 23.708519748686232]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry24 = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.06815624714136, 23.725196279272357],
              [97.0686497736001, 23.725218378987552],
              [97.06863904476404, 23.72540008761487],
              [97.06816161155939, 23.725395176574228]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry25 = 
    /* color: #ff0000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.06405246734857, 23.725161901930186],
              [97.06453526497125, 23.725161901930186],
              [97.06451917171717, 23.725525319088998],
              [97.06404710293054, 23.72551795253503]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry26 = 
    /* color: #00ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.02899599552393, 23.76670521230305],
              [97.03016543865442, 23.766710121786254],
              [97.03016007423639, 23.767230525953007],
              [97.02900135994196, 23.767225616489462]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry27 = 
    /* color: #0000ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.03566664934397, 23.766152894262373],
              [97.03567469597101, 23.76578959045065],
              [97.03596973896265, 23.76578959045065],
              [97.03596437454462, 23.766162713270237]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry28 = 
    /* color: #999900 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.06426167965174, 23.783308025120466],
              [97.06426436186075, 23.78295213253005],
              [97.06465596437693, 23.78295213253005],
              [97.06465596437693, 23.783317842833284]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry29 = 
    /* color: #009999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.06514412641764, 23.78313376059447],
              [97.06553841114282, 23.78313866945756],
              [97.0655330467248, 23.783320297261376],
              [97.06514144420862, 23.78332275168942]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry30 = 
    /* color: #ff00ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.09461892128229, 23.894571095833278],
              [97.09559524536371, 23.894571095833278],
              [97.09557915210962, 23.89547354760544],
              [97.09462428570032, 23.895458833768345]]]),
        {
          "Class": "DDF",
          "system:index": "0"
        }),
    geometry31 = 
    /* color: #ff9999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.09344143152475, 23.894186080524943],
              [97.09345484256983, 23.893830492120124],
              [97.09403151750803, 23.893835396794426],
              [97.09403419971704, 23.89419588984639]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry32 = 
    /* color: #99ff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.095107083323, 23.900797394428043],
              [97.0960968184495, 23.90081210765766],
              [97.09608608961344, 23.901537958240315],
              [97.09510976553202, 23.901537958240315]]]),
        {
          "Class": "DDF",
          "system:index": "0"
        }),
    geometry34 = 
    /* color: #ffff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.07066947698831, 23.979067672431825],
              [97.07234853983164, 23.97908727817645],
              [97.07233781099558, 23.980050406707363],
              [97.07066947698831, 23.98003325180925]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry35 = 
    /* color: #99ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.24885398626566, 24.135308868044422],
              [97.2488969016099, 24.13436403820558],
              [97.24958354711771, 24.13436403820558],
              [97.24959427595377, 24.134956393480493],
              [97.24930459738016, 24.134931916044156],
              [97.24927241087198, 24.135137526363867],
              [97.24909002065897, 24.135127735403753],
              [97.24907392740488, 24.135318658990663]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry36 = 
    /* color: #ff99ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.24675113439798, 24.134226963866734],
              [97.24675113439798, 24.13339961920184],
              [97.24907392740488, 24.13336045482467],
              [97.24907929182291, 24.133869590792415],
              [97.24888617277384, 24.133884277376787],
              [97.24889153719187, 24.134222068351917]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry37 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.26574653864145, 24.121684040159266],
              [97.266926710608, 24.12169872814274],
              [97.26693207502603, 24.123485753550558],
              [97.26578945398569, 24.123471065772215]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry38 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.19500595808267, 24.118442850571743],
              [97.1957677054429, 24.11845753892725],
              [97.19577306986093, 24.119710939053668],
              [97.1950113225007, 24.119691354771092]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry39 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.99467713117838, 23.989110324338426],
              [96.99685508489847, 23.989071115897822],
              [96.99684435606241, 23.991296176014323],
              [96.99473077535868, 23.99128637407171]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry40 = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.01594973087549, 24.029527871988563],
              [97.01683217764139, 24.029537671017415],
              [97.01682949543238, 24.03012806112668],
              [97.01593900203943, 24.03012806112668]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry41 = 
    /* color: #00ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.70782024145365, 24.092319391867836],
              [96.70785242796183, 24.090605389206022],
              [96.7088931250596, 24.090644566665745],
              [96.70886093855142, 24.092221449476224]]]),
        {
          "Class": "DDF",
          "system:index": "0"
        }),
    geometry42 = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.68659860372782, 24.0041434306362],
              [96.68658251047373, 24.003834699904633],
              [96.68675953626871, 24.00390330679789],
              [96.68676221847772, 24.004214487604468]]]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry43 = 
    /* color: #ff0000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.68549085140467, 24.002839895841444],
              [96.685549860003, 24.002438051625177],
              [96.68606484413385, 24.00258016740606],
              [96.68597364902735, 24.002874199557873]]]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry44 = 
    /* color: #00ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.69568324566126, 24.010736860101794],
              [96.69568861007929, 24.01057515238496],
              [96.69583881378412, 24.010562901792063],
              [96.69593537330866, 24.01064620580072],
              [96.69589514017343, 24.010771161712558],
              [96.6957637119317, 24.010800563085926]]]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry45 = 
    /* color: #0000ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.78218985080957, 24.036869584889025],
              [96.78221935510874, 24.036639320653496],
              [96.78246343612909, 24.03668341383694],
              [96.78264850855112, 24.036908778760345],
              [96.78257072448969, 24.037320313687303],
              [96.78218448639154, 24.0370386083737]]]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry46 = 
    /* color: #999900 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.71308541774988, 24.068088611902805],
              [96.71308273554087, 24.06757186728835],
              [96.71390617370844, 24.067574316319856],
              [96.71390080929041, 24.06812534722269]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry47 = 
    /* color: #009999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.69274354458094, 24.078276137466148],
              [96.69345164776087, 24.078281035120348],
              [96.69344628334284, 24.07901078350408],
              [96.69273281574488, 24.07900588587776]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry48 = 
    /* color: #ff00ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.73667812824488, 24.102223429597775],
              [96.73667812824488, 24.101973695659602],
              [96.73724407434702, 24.101956557038136],
              [96.73724943876505, 24.10222832633679]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry49 = 
    /* color: #ff9999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.59391749382257, 24.29317827061921],
              [97.59482676267862, 24.293190494146046],
              [97.59481335163355, 24.294290606740596],
              [97.59394968033075, 24.29429549610862]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry50 = 
    /* color: #99ff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.25552732229471, 24.2401390936647],
              [97.25554609775782, 24.23944939708238],
              [97.25617105245828, 24.23945673429974],
              [97.25612813711405, 24.240141539390603]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry51 = 
    /* color: #9999ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.24865282058954, 24.24545354513182],
              [97.24867964267969, 24.244401922559877],
              [97.24939847469568, 24.244397031271788],
              [97.24933410167932, 24.245487783860142]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry52 = 
    /* color: #ffff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.31627667427301, 24.20436043380646],
              [97.31628203869104, 24.203166578615473],
              [97.31825078010797, 24.203151899998467],
              [97.318256144526, 24.20436043380646]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry53 = 
    /* color: #99ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.29703450680017, 24.183769758519155],
              [97.29715252399683, 24.182056981313327],
              [97.30136895656824, 24.18298188386012],
              [97.30083251476526, 24.184264012809418]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry54 = 
    /* color: #ff99ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.31003785610437, 24.1767423319826],
              [97.31001639843225, 24.17462815579936],
              [97.31191003799677, 24.174589004058287],
              [97.31176519870996, 24.176859785188174]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry55 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.46191525972236, 24.594714837700437],
              [97.46308470230602, 24.594724593152584],
              [97.46306324464392, 24.595817198982093],
              [97.4618723443982, 24.59578793287884]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry56 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.33588362217188, 24.595173343054267],
              [97.33634496212244, 24.59520748702437],
              [97.33632886886835, 24.59575866696714],
              [97.33586752891779, 24.595753789279197]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry57 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.02847564697504, 24.56174192999639],
              [97.02872241020441, 24.56143943085033],
              [97.02939832687616, 24.561571164439147],
              [97.02934468269586, 24.561878542274698],
              [97.02881896972895, 24.561819994173653]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry58 = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.85039037943125, 24.466369809048366],
              [96.85037965059519, 24.466154969293086],
              [96.85075515985727, 24.466174500195077],
              [96.85075515985727, 24.46639910535024]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry59 = 
    /* color: #00ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.63374567508936, 24.4126997579512],
              [96.63552666187525, 24.41281210822146],
              [96.63548374653101, 24.413930720675513],
              [96.63449669361353, 24.413911181678397],
              [96.63371348858118, 24.413886757927777]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry60 = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.64731765270471, 24.417044709684813],
              [96.64782190799951, 24.41703005579882],
              [96.64781117916345, 24.417650402151054],
              [96.64729083061457, 24.41763574833538]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry61 = 
    /* color: #ff0000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.59612232923746, 24.39338745929148],
              [96.59650588512659, 24.393394787606642],
              [96.59649783849954, 24.393802729812855],
              [96.59611428261042, 24.393792958757437]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry62 = 
    /* color: #00ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.64715940237284, 24.455624930742427],
              [96.64827520132303, 24.455634697010257],
              [96.64825910806894, 24.456274385904656],
              [96.64712185144663, 24.456259736577]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry63 = 
    /* color: #0000ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.63499290228128, 24.45454819507062],
              [96.63587266683817, 24.454562844597294],
              [96.63586730242014, 24.455183006330646],
              [96.63497144460916, 24.455178123179305]]]),
        {
          "Class": "Mangrove",
          "system:index": "0"
        }),
    geometry64 = 
    /* color: #999900 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.52338082075357, 24.53276944662547],
              [96.52657801389933, 24.532896330189132],
              [96.52652436971903, 24.534555564986608],
              [96.52331644773722, 24.534448203398654]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry65 = 
    /* color: #009999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.71321148157358, 24.50884960486717],
              [96.7137559700036, 24.508864248073294],
              [96.71374792337656, 24.50911806337497],
              [96.71321148157358, 24.50911562284566]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry66 = 
    /* color: #ff00ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.70148218155146, 24.508806895506254],
              [96.70204276323557, 24.50882153871736],
              [96.70204276323557, 24.509060710923762],
              [96.70149559259653, 24.509058270393346]]]),
        {
          "Class": "MDF",
          "system:index": "0"
        }),
    geometry67 = 
    /* color: #ff9999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.76440680504084, 24.615458097550206],
              [96.76493520021677, 24.615470289849412],
              [96.76493251800775, 24.615804358385127],
              [96.76443094492197, 24.61579704302529]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry68 = 
    /* color: #99ff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.70867050171137, 24.624338653356563],
              [96.70891994714975, 24.62465563023457],
              [96.70856321335077, 24.624870198741988],
              [96.7082788991952, 24.624616617739115]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry69 = 
    /* color: #9999ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.74136931181192, 24.55605043261937],
              [96.74135053634882, 24.555364898357734],
              [96.74257898807764, 24.55535513983586],
              [96.74256557703256, 24.55605775147027]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry70 = 
    /* color: #ffff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.20800132036447, 24.49864775666869],
              [96.20799863815546, 24.498301172165412],
              [96.208637003901, 24.498296290686714],
              [96.20862091064691, 24.49865263813375]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry71 = 
    /* color: #99ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.17569679498911, 24.54430678622326],
              [96.17625201225519, 24.544221391603163],
              [96.17626005888224, 24.544667882831426],
              [96.1757128882432, 24.54469228121343]]]),
        {
          "Class": "DDF",
          "system:index": "0"
        }),
    geometry72 = 
    /* color: #ff99ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[95.95870876789331, 24.80972752396725],
              [95.96088135719538, 24.809683700117468],
              [95.96080625534296, 24.810706252575482],
              [95.95869267463922, 24.810750076063727]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry73 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[95.904442315104, 24.969801218879923],
              [95.90463006973505, 24.969587246338588],
              [95.90508068084955, 24.96959697237127],
              [95.9054132747674, 24.970024917048],
              [95.9052147913003, 24.970311833668248],
              [95.9046568918252, 24.970319128149853]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry74 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[95.9144550013566, 24.979114742543576],
              [95.91510946035623, 24.979214426621258],
              [95.91503704071283, 24.979812529390596],
              [95.91439331054926, 24.979768765871942]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry75 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[95.93978578329325, 24.99443110427297],
              [95.93978041887522, 24.99406402014552],
              [95.9400647330308, 24.99406888219409],
              [95.94005936861276, 24.99442867325587]]]),
        {
          "Class": "Oak",
          "system:index": "0"
        }),
    geometry76 = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[95.93899989605188, 24.99481034235255],
              [95.93899184942484, 24.99453563796303],
              [95.93927616358042, 24.994540499992954],
              [95.9392922568345, 24.994798187304053]]]),
        {
          "Class": "Oak",
          "system:index": "0"
        }),
    geometry77 = 
    /* color: #00ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([95.94072187423944, 24.99634673080348]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry78 = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.01305568695307, 25.040526691810303],
              [96.01411784172296, 25.040492670342285],
              [96.01412052393198, 25.041126926158153],
              [96.01326221704721, 25.041134216435832]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry79 = 
    /* color: #ff0000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.01673031330347, 25.060611075619484],
              [96.01738209009409, 25.06096095284383],
              [96.01699853420496, 25.061468758982453],
              [96.01631725311518, 25.06111159411887]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry80 = 
    /* color: #00ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.0083779144311, 25.07443168095114],
              [96.00837523222208, 25.073770873583836],
              [96.00930327654123, 25.073783020810282],
              [96.00930059433222, 25.07444382811202]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry81 = 
    /* color: #0000ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.08510786772013, 25.02110983525511],
              [96.08641946792841, 25.021107404765985],
              [96.08641410351038, 25.021639680737746],
              [96.08514810085535, 25.021649402651835]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry82 = 
    /* color: #999900 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.13349223613977, 25.032910507792984],
              [96.13348687172174, 25.032234894929363],
              [96.13482261181116, 25.032215452777507],
              [96.13481724739313, 25.032922659069424]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry83 = 
    /* color: #009999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.09605932712793, 25.061349704143623],
              [96.09667891741037, 25.061356993218716],
              [96.09667087078333, 25.061944977181074],
              [96.09605128050089, 25.061937688140965]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry84 = 
    /* color: #ff00ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([96.11740166425943, 25.08951266774361]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry85 = 
    /* color: #ff9999 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([96.11751163482904, 25.090923985886867]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry86 = 
    /* color: #99ff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.11589158058405, 25.091005360877283],
              [96.1160820174241, 25.09107580485513],
              [96.11601496219873, 25.091267703761503],
              [96.11587816953897, 25.091221550887447]]]),
        {
          "Class": "Oak",
          "system:index": "0"
        }),
    geometry87 = 
    /* color: #9999ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([96.10978150844812, 25.094669608464084]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry88 = 
    /* color: #ffff99 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Point([96.11169660568476, 25.09365912754585]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry89 = 
    /* color: #99ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.10709125280619, 25.089624407811314],
              [96.10764378786325, 25.08965841563775],
              [96.10763037681818, 25.09011023300634],
              [96.1070939350152, 25.090098087399987]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry90 = 
    /* color: #ff99ff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.25533426285028, 25.258880574754198],
              [96.25532889843225, 25.258482749400546],
              [96.25572854757547, 25.258480323632178],
              [96.25574732303858, 25.25890725811543]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry91 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.30116248607874, 25.57325742635284],
              [96.30236411571741, 25.57325742635284],
              [96.30235875129938, 25.573869544120434],
              [96.3011544394517, 25.573869544120434]]]),
        {
          "Class": "Bamboo",
          "system:index": "0"
        }),
    geometry92 = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[95.98523313284159, 25.59584443388421],
              [95.98750764608621, 25.59600892491309],
              [95.98746473074198, 25.597518361438887],
              [95.98532969236612, 25.597469982358565]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry93 = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.60268837690592, 26.096249256699576],
              [96.61373907804727, 26.096249256699576],
              [96.61378199339151, 26.106115182563215],
              [96.60273129225016, 26.10613445113523]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry94 = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.33483756065607, 25.091128030536808],
              [97.33481610298395, 25.08972886039112],
              [97.33612502098322, 25.08972886039112],
              [97.33609283447504, 25.09106973210015]]]),
        {
          "Class": "Plantation",
          "system:index": "0"
        }),
    geometry95 = 
    /* color: #00ffff */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.54489475965738, 25.3957241149665],
              [97.54750186681986, 25.395801651579],
              [97.54752332449198, 25.397856353658618],
              [97.54501277685404, 25.397817586018668]]]),
        {
          "Class": "Rubber",
          "system:index": "0"
        }),
    geometry96 = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[96.63199151039362, 26.711315202633315],
              [96.63572514534235, 26.711286450980836],
              [96.63566077232599, 26.713672813431856],
              [96.63188422203302, 26.713644062374723]]]),
        {
          "Class": "Lowland_Evergreen",
          "system:index": "0"
        }),
    geometry33 = 
    /* color: #ff0000 */
    /* shown: false */
    ee.Feature(
        ee.Geometry.Polygon(
            [[[97.6959601995906, 26.887787427884586],
              [97.69651273464767, 26.88777785890024],
              [97.69651273464767, 26.88808406599688],
              [97.69599238609878, 26.88808885047618]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    table2 = ee.FeatureCollection("users/BiswasS/Myanmar/mmr_polbnda_adm0_250k_mimu"),
    geometry97 = /* color: #d63000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[97.90006667976094, 27.94984876669174],
              [97.90050656203938, 27.950403193469636],
              [97.89994866256428, 27.950706468451365],
              [97.89935857658101, 27.95035106799637]]]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry98 = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[97.90193617944432, 27.953805510845985],
              [97.90258795623494, 27.953805510845985],
              [97.90258795623494, 27.954127730332427],
              [97.90195495490742, 27.95412299181754]]]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry99 = /* color: #0b4a8b */ee.Feature(
        ee.Geometry.Polygon(
            [[[98.66959244613362, 26.847387694062256],
              [98.67231220607472, 26.84736376305279],
              [98.67232293491078, 26.848569879631278],
              [98.66964609031392, 26.848536376566525]]]),
        {
          "Class": "Upland_Evergreen",
          "system:index": "0"
        }),
    geometry100 = /* color: #d63000 */ee.Feature(
        ee.Geometry.Polygon(
            [[[97.80923525070754, 27.91398924131814],
              [97.81116644119827, 27.91369534385269],
              [97.81113425469009, 27.914548592352265],
              [97.80934253906814, 27.914567553353578]]]),
        {
          "Class": "Pine",
          "system:index": "0"
        }),
    geometry101 = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[97.9036007282695, 27.86306670692157],
              [97.90426591610519, 27.863142586980935],
              [97.90446439957229, 27.863768595443638],
              [97.90403524612991, 27.864185932409914],
              [97.90337542271224, 27.864072113396666]]]),
        {
          "Class": "Pine",
          "system:index": "0"
        });
//----------------------------------------------------ROI--------------------------------------------

var state = ee.FeatureCollection(table);
//print(state);

var roi = state;
Map.centerObject(roi,10);
//print(roi);

var empty = ee.Image().byte();
var outline_roi = empty.paint({
  featureCollection: roi,
  color: 'AREA',
  width: 4
});

var palette = ['FF0000'];
Map.addLayer(outline_roi, {palette: palette, max: 14}, 'different color edges');


var train =ee.FeatureCollection([geometry,geometry2,geometry3,geometry4,geometry5,
                                 geometry6,geometry7,geometry8,geometry9,geometry10,
                                 geometry11,geometry12,geometry13,geometry14,geometry15,
                                 geometry16,geometry17,geometry18,geometry19,geometry20,
                                 geometry21,geometry22,geometry23,geometry24,geometry25,
                                 geometry26,geometry27,geometry28,geometry29,geometry30,
                                 geometry31,geometry32,geometry33,geometry34,geometry35,
                                 geometry36,geometry37,geometry38,geometry39,geometry40,
                                 geometry41,geometry42,geometry43,geometry44,geometry45,
                                 geometry46,geometry47,geometry48,geometry49,geometry50,
                                 geometry51,geometry52,geometry53,geometry54,geometry55,
                                 geometry56,geometry57,geometry58,geometry59,geometry60,
                                 geometry61,geometry62,geometry63,geometry64,geometry65,
                                 geometry66,geometry67,geometry68,geometry69,geometry70,
                                 geometry71,geometry72,geometry73,geometry74,geometry75,
                                 geometry76,geometry77,geometry78,geometry79,geometry80,
                                 geometry81,geometry82,geometry83,geometry84,geometry85,
                                 geometry86,geometry87,geometry88,geometry89,geometry90,
                                 geometry91,geometry92,geometry93,geometry94,geometry95,
                                 geometry96,geometry97,geometry98,geometry99,geometry100,
                                 geometry101]);
                                 /**/
print(train);

var training = train.remap(['Mangrove','MDF','Rubber', 'Bamboo', 'Upland_Evergreen', 'Lowland_Evergreen', 'DDF', 'Plantation', 'Pine', 'Oak'], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'Class');
print(training);

var mangrove = training.filter(ee.Filter.eq('Class', 0));//.limit(2);
var mangrove_size = mangrove.size();
print(mangrove_size,'mangrove_size');

var mdf = training.filter(ee.Filter.eq('Class', 1));//.limit(10);
var mdf_size = mdf.size();
print(mdf_size,'mdf_size');

var rubber = training.filter(ee.Filter.eq('Class', 2));//.limit(1);
var rubber_size = rubber.size();
print(rubber_size,'rubber_size');

var bamboo = training.filter(ee.Filter.eq('Class', 3));//.limit(5);
var bamboo_size = bamboo.size();
print(bamboo_size,'bamboo_size');

var up_evg = training.filter(ee.Filter.eq('Class', 4));//.limit(6);
var up_evg_size = up_evg.size();
print(up_evg_size,'up_evg_size');

var low_evg = training.filter(ee.Filter.eq('Class', 5));//.limit(1);
var low_evg_size = low_evg.size();
print(low_evg_size,'low_evg_size');

var ddf = training.filter(ee.Filter.eq('Class', 6));//.limit(4);
var ddf_size = ddf.size();
print(ddf_size,'ddf_size');

var plantation = training.filter(ee.Filter.eq('Class', 7));//.limit(5);
var plantation_size = plantation.size();
print(plantation_size,'plantation_size');

var pine = training.filter(ee.Filter.eq('Class', 8));//.limit(5);
var pine_size = pine.size();
print(pine_size,'pine_size');

var oak = training.filter(ee.Filter.eq('Class', 9));//.limit(5);
var oak_size = oak.size();
print(oak_size,'oak_size');

var training1 = mangrove.merge(mdf).merge(rubber).merge(bamboo).merge(up_evg).merge(low_evg).merge(ddf)
.merge(plantation).merge(pine).merge(oak);
print(training1);

/**/

//----------------------------------------------------TP_PCT----------------------------------------------
//Load TP_PCT_Map
var tc = ee.Image(tcc);
var tc_gte30 = tc.gte(30);
var tc_gte25 = tc.gte(25);
var tc_gte10 = tc.gte(10);
//Map.addLayer(tc.clip(roi), {}, 'PCT');
Map.addLayer(tc_gte30.updateMask(tc_gte30), {}, 'tc_gte30');


//---------------------------------------------------Rainfall----------------------------------------------
//Load CHIRPS data
//-----------------------------------------------------SRTM------------------------------------------------
// Load SRTM
var dataset = ee.Image('CGIAR/SRTM90_V4');
var elevation = dataset.select('elevation').unmask(0);
var slope = ee.Terrain.slope(elevation);

Map.addLayer(dataset, {}, 'elevation');
//print(elevation);

var elev5m = elevation.lte(5);
//Map.addLayer(elev5m, {}, 'elev5m');
//-----------------------------------------------------GEDI-------------------------------------------
// Load GEDI
var gedi = ee.ImageCollection('users/potapovpeter/GEDI_V27');
//print(gedi);

var gedi_sasia= gedi.filterMetadata('system:index', 'equals', 'GEDI_SASIA_v27').first();
//print(gedi_sasia,"gedi_sasia");

var gedi_roi  = ee.Image(gedi_sasia).rename('ht');
//print(gedi_roi);
//Map.addLayer(gedi_roi.clip(roi), {min:0, max:25}, 'gedi_roi');


//----------------------------------------------------Radar--Processing---------------------------------------

function toDB(img) {
  return ee.Image(img).log10().multiply(10.0);
}

// The RL speckle filter
function RefinedLee(img) {
  // img must be in natural units, i.e. not in dB!
  // Set up 3x3 kernels 
  var weights3 = ee.List.repeat(ee.List.repeat(1,3),3);
  var kernel3 = ee.Kernel.fixed(3,3, weights3, 1, 1, false);

  var mean3 = img.reduceNeighborhood(ee.Reducer.mean(), kernel3);
  var variance3 = img.reduceNeighborhood(ee.Reducer.variance(), kernel3);

  // Use a sample of the 3x3 windows inside a 7x7 windows to determine gradients and directions
  var sample_weights = ee.List([[0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0], [0,1,0,1,0,1,0], [0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0]]);

  var sample_kernel = ee.Kernel.fixed(7,7, sample_weights, 3,3, false);

  // Calculate mean and variance for the sampled windows and store as 9 bands
  var sample_mean = mean3.neighborhoodToBands(sample_kernel); 
  var sample_var = variance3.neighborhoodToBands(sample_kernel);

  // Determine the 4 gradients for the sampled windows
  var gradients = sample_mean.select(1).subtract(sample_mean.select(7)).abs();
  gradients = gradients.addBands(sample_mean.select(6).subtract(sample_mean.select(2)).abs());
  gradients = gradients.addBands(sample_mean.select(3).subtract(sample_mean.select(5)).abs());
  gradients = gradients.addBands(sample_mean.select(0).subtract(sample_mean.select(8)).abs());

  // And find the maximum gradient amongst gradient bands
  var max_gradient = gradients.reduce(ee.Reducer.max());

  // Create a mask for band pixels that are the maximum gradient
  var gradmask = gradients.eq(max_gradient);

  // duplicate gradmask bands: each gradient represents 2 directions
  gradmask = gradmask.addBands(gradmask);

  // Determine the 8 directions
  var directions = sample_mean.select(1).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(7))).multiply(1);
  directions = directions.addBands(sample_mean.select(6).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(2))).multiply(2));
  directions = directions.addBands(sample_mean.select(3).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(5))).multiply(3));
  directions = directions.addBands(sample_mean.select(0).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(8))).multiply(4));
  // The next 4 are the not() of the previous 4
  directions = directions.addBands(directions.select(0).not().multiply(5));
  directions = directions.addBands(directions.select(1).not().multiply(6));
  directions = directions.addBands(directions.select(2).not().multiply(7));
  directions = directions.addBands(directions.select(3).not().multiply(8));

  // Mask all values that are not 1-8
  directions = directions.updateMask(gradmask);

  // "collapse" the stack into a singe band image (due to masking, each pixel has just one value (1-8) in it's directional band, and is otherwise masked)
  directions = directions.reduce(ee.Reducer.sum());  

  //var pal = ['ffffff','ff0000','ffff00', '00ff00', '00ffff', '0000ff', 'ff00ff', '000000'];
  //Map.addLayer(directions.reduce(ee.Reducer.sum()), {min:1, max:8, palette: pal}, 'Directions', false);

  var sample_stats = sample_var.divide(sample_mean.multiply(sample_mean));

  // Calculate localNoiseVariance
  var sigmaV = sample_stats.toArray().arraySort().arraySlice(0,0,5).arrayReduce(ee.Reducer.mean(), [0]);

  // Set up the 7*7 kernels for directional statistics
  var rect_weights = ee.List.repeat(ee.List.repeat(0,7),3).cat(ee.List.repeat(ee.List.repeat(1,7),4));

  var diag_weights = ee.List([[1,0,0,0,0,0,0], [1,1,0,0,0,0,0], [1,1,1,0,0,0,0], 
    [1,1,1,1,0,0,0], [1,1,1,1,1,0,0], [1,1,1,1,1,1,0], [1,1,1,1,1,1,1]]);

  var rect_kernel = ee.Kernel.fixed(7,7, rect_weights, 3, 3, false);
  var diag_kernel = ee.Kernel.fixed(7,7, diag_weights, 3, 3, false);

  // Create stacks for mean and variance using the original kernels. Mask with relevant direction.
  var dir_mean = img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel).updateMask(directions.eq(1));
  var dir_var = img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel).updateMask(directions.eq(1));

  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel).updateMask(directions.eq(2)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel).updateMask(directions.eq(2)));

  // and add the bands for rotated kernels
  for (var i=1; i<4; i++) {
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
  }

  // "collapse" the stack into a single band image (due to masking, each pixel has just one value in it's directional band, and is otherwise masked)
  dir_mean = dir_mean.reduce(ee.Reducer.sum());
  dir_var = dir_var.reduce(ee.Reducer.sum());

  // A finally generate the filtered value
  var varX = dir_var.subtract(dir_mean.multiply(dir_mean).multiply(sigmaV)).divide(sigmaV.add(1.0));

  var b = varX.divide(dir_var);

  var result = dir_mean.add(b.multiply(img.subtract(dir_mean)));
  result= result.arrayFlatten([['sum']]);
  return(result);
}

//-----------------------------------------------------PALSAR-----------------------------------------------
//Load PALSAR

var palsar = ee.ImageCollection('JAXA/ALOS/PALSAR/YEARLY/SAR')
                  .filterBounds(roi)
                  .filterDate('2017-01-01', '2018-01-01')
                  .select('HH', 'HV');
//print(palsar,'PALSAR');

var pal_HH = palsar.select('HH');
//print(pal_HH, 'pal_HH');
//Map.addLayer(pal_HH, {},'pal_HH');

// Convert DN to gamma_nought in natural values

function toGamma(img) { 
  return ee.Image(img).pow(2).divide(ee.Number(10.0).pow(8.3));
}

var palsar_gn = palsar.map(function(img) { return ee.Image(img).pow(2).divide(ee.Number(10.0).pow(8.3))});

var pal_HH_gn = palsar_gn.select('HH').first();
var pal_HV_gn = palsar_gn.select('HV').first();
var pal_HH_HV = pal_HH_gn.divide(pal_HV_gn);

//Map.addLayer(pal_HH, {min:-25, max:0}, "pal_HH");


var pal_HH_urf = toDB(pal_HH_gn);
//print(pal_HH_urf,'pal_HH_urf');
//Map.addLayer(pal_HH_urf.clip(roi),{min:-25.0, max:0.0}, "pal_HH_urf");

var pal_HH_rf = toDB(RefinedLee(pal_HH_gn)).rename('HH');
//print(pal_HH_rf,'pal_HH_rf');
//Map.addLayer(pal_HH_rf.clip(roi),{}, "pal_HH_rf");

var pal_HV_rf = toDB(RefinedLee(pal_HV_gn)).rename('HV');
//print(pal_HV_rf, 'pal_HV_rf');
//Map.addLayer(pal_HV_rf.clip(roi),{min:-25.0, max:0.0}, "pal_HV_rf");

var pal_HH_HV = (pal_HH_rf.divide(pal_HV_rf)).rename('HH_HV');
//print(pal_HH_HV, 'pal_HH_HV');
//Map.addLayer(pal_HH_HV.clip(roi),{min:-1.0, max:1.0}, "pal_HH_HV");

var glcmHH = pal_HH_gn.unitScale(0,1).multiply(255).toByte().glcmTexture({size:3});
//print(glcmHH, 'glcmHH');

var glcmHV = pal_HV_gn.unitScale(0,1).multiply(255).toByte().glcmTexture({size:3});
var glcmHH_HV =pal_HH_HV.unitScale(0,1).multiply(255).toByte().glcmTexture({size:3});

var pal_variables = pal_HH_gn.addBands(pal_HV_gn).addBands(pal_HH_HV)
                             .addBands(glcmHH).addBands(glcmHV).addBands(glcmHH_HV);

//----------------------------------------------------Sentinel-1----------------------------------------------------
//Load Sentinel-1
var s1_col = ee.ImageCollection('COPERNICUS/S1_GRD_FLOAT')
                            .filterBounds(roi)
                            .filter(ee.Filter.eq('instrumentMode', 'IW'))
                            .filterDate('2018-05-01', '2020-04-30')
                            .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
                            .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
                            .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));
                            
//print(s1_col, 'S1_col');

var s1_col_VV = s1_col.select('VV');
var s1_col_VH = s1_col.select('VH');

//Map.addLayer(S1_col.select('VV'), {}, 'S1_col');
//Map.addLayer(S1_col.select('VH'), {}, 'S1_col');

// Functions to convert from/to dB
function toNatural(img) {
  return ee.Image(10.0).pow(img.select(0).divide(10.0));
}

// convert sigma naught to gamma naught for S1

//function toGamma0(image) {
//  return image.select(1).subtract(image.select('angle').multiply(Math.PI/180.0).cos().log10().multiply(10.0));
//}

//Function applies Refined Lee to all images in collection

var s1_VV_rf = s1_col_VV.map(function(image){
  return toDB(RefinedLee(toNatural(image))).set("system:time_start", image.get('system:time_start'));
});

//print(s1_VV_rf, "s1_VV_rf");

//1 month VV composite from speckle filtered images

var months = ee.List.sequence(1, 12, 1);
//print(months);
var mon = ee.List(['January','February','March','April','May','June','July','August','September','October','November','December']);
var s1_VV_mon_composites = months.map(function(m) {
  var n = ee.Number(m).subtract(1);
  var s1_VV_image = s1_col_VV.filter(ee.Filter.calendarRange({
    start: m, 
    end: ee.Number(m).add(0), 
    field: 'month'
  })).median()
  .set('month', mon.get(n))
  .select(0).rename('VV_rf');
  
  var glcmVV = (s1_VV_image.select(0)).unitScale(0,1).multiply(255).toByte().glcmTexture({size:3});
  
  return s1_VV_image.addBands(glcmVV).float();
});

//print(s1_VV_mon_composites, "s1_VV_mon_composites");
//print(s1_VV_mon_composites.get(0),"s1_VV_mon_composites.get(0)");

var s1_VV_variables = ee.Image(s1_VV_mon_composites.get(0))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(1)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(2)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(3)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(4)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(5)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(6)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(7)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(8)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(9)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(10)))
                                           .addBands(ee.Image(s1_VV_mon_composites.get(11)));


var s1_VH_rf = s1_col_VH.map(function(image){
  return toDB(RefinedLee(toNatural(image))).set("system:time_start", image.get('system:time_start'));
});

//print(s1_VH_rf, "s1_VH_rf");


//1 month VH composite from speckle filtered images

var months = ee.List.sequence(1, 12, 1);
//print(months);
var mon = ee.List(['January','February','March','April','May','June','July','August','September','October','November','December']);
var s1_VH_mon_composites = months.map(function(m) {
  var n = ee.Number(m).subtract(1);
  var s1_VH_image = s1_col_VH.filter(ee.Filter.calendarRange({
    start: m, 
    end: ee.Number(m).add(0), 
    field: 'month'
  })).median()
  .set('month', mon.get(n))
  .select(0).rename('VH_rf');
  
  var glcmVH = (s1_VH_image.select(0)).unitScale(0,1).multiply(255).toByte().glcmTexture({size:3});
  
  return s1_VH_image.addBands(glcmVH).float();
});

//print(s1_VH_mon_composites, "s1_VH_mon_composites");
//print(s1_VH_mon_composites.get(0),"s1_VH_mon_composites.get(0)");

var s1_VH_variables = ee.Image(s1_VH_mon_composites.get(0))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(1)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(2)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(3)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(4)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(5)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(6)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(7)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(8)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(9)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(10)))
                                           .addBands(ee.Image(s1_VH_mon_composites.get(11)));
                                           

//--------------------------------------------------- Sentinel-2------------------------------------------------------

//Load Sentinel-2 SR
// Function to mask clouds using the Sentinel-2 QA band
// @param {ee.Image} image Sentinel-2 image
// @return {ee.Image} cloud masked Sentinel-2 image
 //
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  var prop = image.toDictionary();

  return image.updateMask(mask).divide(10000).set("system:time_start", image.get('system:time_start'));
}

var s2collection = ee.ImageCollection('COPERNICUS/S2_SR')
                  .filterBounds(roi)
                  .filterDate('2015-04-01', '2020-04-30')
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',50))
                  .map(maskS2clouds)
                  .select('B[2-8]', 'B8A', 'B11', 'B12');
//print(s2collection.first());
//print(s2collection.size());

var s2_med = s2collection.median();
//Map.addLayer(s2_med, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 's2_med');
var s2_med_ndvi =s2_med.normalizedDifference(['B8A', 'B4']);
var s2_water_mask =s2_med_ndvi.lte(0);

//Map.addLayer(s2_water_mask.clip(roi), {}, "s2_water_mask");

//1 month composite

var months = ee.List.sequence(1, 12, 1);
//print(months);
var mon = ee.List(['January','February','March','April','May','June','July','August','September','October','November','December']);
var s2_mon_composites = months.map(function(m) {
  var n = ee.Number(m).subtract(1);
  var s2_img_all_10m = s2collection.filter(ee.Filter.calendarRange({
    start: m, 
    end: ee.Number(m).add(0), 
    field: 'month'
  })).median()
  .set('month', mon.get(n));

  return s2_img_all_10m.float();
});

// Map the function over the collection and display the result.
//print(s2_mon_composites,'s2_mon_composites');

var check0 = ee.Image(s2_mon_composites.get(0));
var check1 = ee.Image(s2_mon_composites.get(1));
var check2 = ee.Image(s2_mon_composites.get(2));
var check3 = ee.Image(s2_mon_composites.get(3));
var check4 = ee.Image(s2_mon_composites.get(4));
var check5 = ee.Image(s2_mon_composites.get(5));
var check6 = ee.Image(s2_mon_composites.get(6));
var check7 = ee.Image(s2_mon_composites.get(7));
var check8 = ee.Image(s2_mon_composites.get(8));
var check9 = ee.Image(s2_mon_composites.get(9));
var check10 = ee.Image(s2_mon_composites.get(10));
var check11 = ee.Image(s2_mon_composites.get(11));

Map.addLayer(check0, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checkjan');
Map.addLayer(check1, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checkfeb');
Map.addLayer(check2, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checkmar');
Map.addLayer(check3, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checkapr');
Map.addLayer(check10, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checknov');
Map.addLayer(check11, {min: 0.0, max: 0.3,bands: ['B11', 'B8', 'B3']}, 'checkdec');

var comp_list = ee.List([check0,check1,check2,check3,check10,check11]);

var image_indices = ee.List([]);
var i;
for (i = 0; i < 6; i++) {
  var image = ee.Image(comp_list.get(i));
  
  var b2 = image.select('B2');
  var b3 = image.select('B3');
  var b4 = image.select('B4');
  var b5 = image.select('B5');
  var b6 = image.select('B6');
  var b7 = image.select('B7');
  var b8 = image.select('B8');
  var b8a = image.select('B8A');
  var b11 = image.select('B11');
  var b12 = image.select('B12');
  var si_1 = (b2.divide(b3).rename('SI_1'));
  var si_2 = (b2.divide(b4).rename('SI_2'));
  var si_3 = (b2.divide(b5).rename('SI_3'));
  var si_4 = (b2.divide(b6).rename('SI_4'));
  var si_5 = (b2.divide(b7).rename('SI_5'));
  var si_6 = (b2.divide(b8).rename('SI_6'));
  var si_7 = (b2.divide(b8a).rename('SI_7'));
  var si_8 = (b2.divide(b11).rename('SI_8'));
  var si_9 = (b2.divide(b12).rename('SI_9'));
  
  var si_10 = (b3.divide(b4).rename('SI_10'));
  var si_11 = (b3.divide(b5).rename('SI_11'));
  var si_12 = (b3.divide(b6).rename('SI_12'));
  var si_13 = (b3.divide(b7).rename('SI_13'));
  var si_14 = (b3.divide(b8).rename('SI_14'));
  var si_15 = (b3.divide(b8a).rename('SI_15'));
  var si_16 = (b3.divide(b11).rename('SI_16'));
  var si_17 = (b3.divide(b12).rename('SI_17'));
  
  var si_18 = (b4.divide(b5).rename('SI_18'));
  var si_19 = (b4.divide(b6).rename('SI_19'));
  var si_20 = (b4.divide(b7).rename('SI_20'));
  var si_21 = (b4.divide(b8).rename('SI_21'));
  var si_22 = (b4.divide(b8a).rename('SI_22'));
  var si_23 = (b4.divide(b11).rename('SI_23'));
  var si_24 = (b4.divide(b12).rename('SI_24'));
  
  var si_25 = (b5.divide(b6).rename('SI_25'));
  var si_26 = (b5.divide(b7).rename('SI_26'));
  var si_27 = (b5.divide(b8).rename('SI_27'));
  var si_28 = (b5.divide(b8a).rename('SI_28'));
  var si_29 = (b5.divide(b11).rename('SI_29'));
  var si_30 = (b5.divide(b12).rename('SI_30'));
  
  var si_31 = (b6.divide(b7).rename('SI_31'));
  var si_32 = (b6.divide(b8).rename('SI_32'));
  var si_33 = (b6.divide(b8a).rename('SI_33'));
  var si_34 = (b6.divide(b11).rename('SI_34'));
  var si_35 = (b6.divide(b12).rename('SI_35'));
    
  var si_36 = (b7.divide(b8).rename('SI_36'));
  var si_37 = (b7.divide(b8a).rename('SI_37'));
  var si_38 = (b7.divide(b11).rename('SI_38'));
  var si_39 = (b7.divide(b12).rename('SI_39'));
    
  var si_40 = (b8.divide(b8a).rename('SI_40'));
  var si_41 = (b8.divide(b11).rename('SI_41'));
  var si_42 = (b8.divide(b12).rename('SI_42'));
    
  var si_43 = (b8a.divide(b11).rename('SI_43'));
  var si_44 = (b8a.divide(b12).rename('SI_44'));
    
  var si_45 = (b11.divide(b12).rename('SI_45'));
    

  var nd_1 = image.normalizedDifference(['B3', 'B2']).rename('ND_1');
  var nd_2 = image.normalizedDifference(['B4', 'B2']).rename('ND_2');
  var nd_3 = image.normalizedDifference(['B8A', 'B2']).rename('ND_3');
  var nd_4 = image.normalizedDifference(['B4', 'B3']).rename('ND_4');
  var nd_5 = image.normalizedDifference(['B8A', 'B3']).rename('ND_5');
    
  var nd_6 = image.normalizedDifference(['B5', 'B2']).rename('ND_6');
  var nd_7 = image.normalizedDifference(['B6', 'B2']).rename('ND_7');
  var nd_8 = image.normalizedDifference(['B7', 'B2']).rename('ND_8');
  var nd_9 = image.normalizedDifference(['B8', 'B2']).rename('ND_9');
  var nd_10 = image.normalizedDifference(['B11', 'B2']).rename('ND_10');
  var nd_11 = image.normalizedDifference(['B12', 'B2']).rename('ND_11');
  
  var nd_12 = image.normalizedDifference(['B5', 'B3']).rename('ND_12');
  var nd_13 = image.normalizedDifference(['B6', 'B3']).rename('ND_13');
  var nd_14 = image.normalizedDifference(['B7', 'B3']).rename('ND_14');
  var nd_15 = image.normalizedDifference(['B8', 'B3']).rename('ND_15');
  var nd_16 = image.normalizedDifference(['B11', 'B3']).rename('ND_16');
  var nd_17 = image.normalizedDifference(['B12', 'B3']).rename('ND_17');
    
  var nd_18 = image.normalizedDifference(['B5', 'B4']).rename('ND_18');
  var nd_19 = image.normalizedDifference(['B6', 'B4']).rename('ND_19');
  var nd_20 = image.normalizedDifference(['B7', 'B4']).rename('ND_20');
  var nd_21 = image.normalizedDifference(['B8', 'B4']).rename('ND_21');
  var nd_22 = image.normalizedDifference(['B11', 'B4']).rename('ND_22');
  var nd_23 = image.normalizedDifference(['B12', 'B4']).rename('ND_23');
  var nd_24 = image.normalizedDifference(['B6', 'B5']).rename('ND_24');
  var nd_25 = image.normalizedDifference(['B7', 'B5']).rename('ND_25');
  var nd_26 = image.normalizedDifference(['B8A', 'B5']).rename('ND_26');
  var nd_27 = image.normalizedDifference(['B8', 'B5']).rename('ND_27');
  var nd_28 = image.normalizedDifference(['B11', 'B5']).rename('ND_28');
  var nd_29 = image.normalizedDifference(['B12', 'B5']).rename('ND_29');
  
  var nd_30 = image.normalizedDifference(['B7', 'B6']).rename('ND_30');
  var nd_31 = image.normalizedDifference(['B8A', 'B6']).rename('ND_31');
  var nd_32 = image.normalizedDifference(['B8', 'B6']).rename('ND_32');
  var nd_33 = image.normalizedDifference(['B11', 'B6']).rename('ND_33');
  var nd_34 = image.normalizedDifference(['B12', 'B6']).rename('ND_34');
  
  var nd_35 = image.normalizedDifference(['B8A', 'B7']).rename('ND_35');
  var nd_36 = image.normalizedDifference(['B8', 'B7']).rename('ND_36');
  var nd_37 = image.normalizedDifference(['B11', 'B7']).rename('ND_37');
  var nd_38 = image.normalizedDifference(['B12', 'B7']).rename('ND_38');
    
  var nd_39 = image.normalizedDifference(['B8', 'B8A']).rename('ND_39');
  var nd_40 = image.normalizedDifference(['B11', 'B8A']).rename('ND_40');
  var nd_41 = image.normalizedDifference(['B12', 'B8A']).rename('ND_41');
    
  var nd_42 = image.normalizedDifference(['B11', 'B8']).rename('ND_42');
  var nd_43 = image.normalizedDifference(['B12', 'B8']).rename('ND_43');
    
  var nd_44 = image.normalizedDifference(['B12', 'B11']).rename('ND_44');
      

  
  var ndvi = image.normalizedDifference(['B8A', 'B4']).rename('NDVI');
    
  var evi = image.expression('2.5 * ((nir - red) / (nir + 6 * red - 7.5 * blue + 1))',{
       'nir': image.select('B8A'), 'red': image.select('B4'), 'blue': image.select('B2')});
    
    
  var savi = image.expression('1.5 * ((nir - red) / (nir + red + 0.5))',{
    'nir': image.select('B8A'), 'red': image.select('B4')});
        
  var wri = (b3.add(b4).divide(b8a.add(b11)).rename('WRI'));
    
  var awei = image.expression('4 * (green - swir1) - (0.25 * nir + 2.75 * swir1)',{
    'green': image.select('B3'), 'swir1': image.select('B11'), 'nir': image.select('B8A')});
  
  var ccci = image.expression('((nir - vre1) / (nir + vre2)) / ((nir - red) / (nir + red))', {
      'nir': image.select('B8A'), 'red': image.select('B4'),'vre1': image.select('B5'), 
      'vre2': image.select('B6')});
      
  var s2rep = image.expression('705.0 + 35.0 * ((((red + vre3) / 2.0) - vre1) / (vre2 - vre1))',{
    'red': image.select('B4'),'vre1': image.select('B5'), 'vre2': image.select('B6'),
    'vre3': image.select('B7')});
    
  var ireci = image.expression('(nir - red)/(vre1/vre2)', { 
    'nir': image.select('B8A'), 'red': image.select('B4'),'vre1': image.select('B5'), 
    'vre2': image.select('B6')});

  
  var glcm_b = b2.multiply(255).int().glcmTexture({size:3});
  var glcm_g = b3.multiply(255).int().glcmTexture({size:3});
  var glcm_r = b4.multiply(255).int().glcmTexture({size:3});
  var glcm_nir = b8.multiply(255).int().glcmTexture({size:3});
  var glcm_swir1 = b11.multiply(255).int().glcmTexture({size:3});
  var glcm_swir2 = b12.multiply(255).int().glcmTexture({size:3});
  var glcm_vre1 = b5.multiply(255).int().glcmTexture({size:3});
  var glcm_vre2 = b6.multiply(255).int().glcmTexture({size:3});
  var glcm_vre3 = b7.multiply(255).int().glcmTexture({size:3});
  var glcm_nnir = b8a.multiply(255).int().glcmTexture({size:3});
  
 
  var image = image
               .addBands(si_1)
               .addBands(si_2)
               .addBands(si_3)
               .addBands(si_4)
               .addBands(si_5)
               .addBands(si_6)
              
               .addBands(si_7)
               .addBands(si_8)
               .addBands(si_9)
               .addBands(si_10)
              
               .addBands(si_11)
               .addBands(si_12)
             
               
               .addBands(si_13)
               .addBands(si_14)
               .addBands(si_15)
               .addBands(si_16)
              
               .addBands(si_17)
               .addBands(si_18)
               
               
               .addBands(si_19)
               .addBands(si_20)
               .addBands(si_21)
               .addBands(si_22)
             
               .addBands(si_23)
               .addBands(si_24)
               
               
               .addBands(si_25)
               .addBands(si_26)
               .addBands(si_27)
               .addBands(si_28)
               
               .addBands(si_31)
               .addBands(si_32)
               .addBands(si_33)
               .addBands(si_34)
               .addBands(si_35)
               .addBands(si_36)
               .addBands(si_37)
               .addBands(si_38)
               .addBands(si_39)
               .addBands(si_40)
               
               .addBands(si_41)
               .addBands(si_42)
               
               .addBands(si_43)
               .addBands(si_44)
               
               .addBands(si_45)
               .addBands(nd_1)
               .addBands(nd_2)
               .addBands(nd_3)
               .addBands(nd_4)
               .addBands(nd_5)
              
               .addBands(nd_6)
               .addBands(nd_7)
               .addBands(nd_8)
               .addBands(nd_9)
             
               .addBands(nd_10)
               .addBands(nd_11)
               
               .addBands(nd_12)
               .addBands(nd_13)
               .addBands(nd_14)
               .addBands(nd_15)
              
               .addBands(nd_16)
               .addBands(nd_17)
               
               
               .addBands(nd_18)
               .addBands(nd_19)
               .addBands(nd_20)
               .addBands(nd_21)
              
               .addBands(nd_22)
               .addBands(nd_23)
               
               .addBands(nd_24)
               .addBands(nd_25)
               .addBands(nd_26)
               .addBands(nd_27)
               .addBands(nd_28)
               .addBands(nd_29)
               .addBands(nd_30)
               .addBands(nd_31)
               .addBands(nd_32)
               .addBands(nd_33)
               .addBands(nd_34)
               .addBands(nd_35)
               .addBands(nd_36)
               .addBands(nd_37)
               .addBands(nd_38)
               .addBands(nd_39)
               
               .addBands(nd_40)
               .addBands(nd_41)
               
               .addBands(nd_42)
               .addBands(nd_43)
               
               .addBands(nd_44)
               .addBands(ndvi)
               .addBands(evi.rename('EVI'))
               .addBands(savi.rename('SAVI'))
               .addBands(wri)
               .addBands(awei.rename('AWEI'))
               
               .addBands(ccci.rename('CCC1'))
               .addBands(s2rep.rename('S2REP'))
               .addBands(ireci.rename('IRECI'))
               
               .addBands(glcm_b)
               .addBands(glcm_g)
               .addBands(glcm_r)
               .addBands(glcm_nir)
               .addBands(glcm_swir1)
               .addBands(glcm_swir2)
               
               .addBands(glcm_vre1)
               .addBands(glcm_vre2)
               .addBands(glcm_vre3)
               .addBands(glcm_nnir);
  //print(image,i);
  
  var image_indices = image_indices.add(image);
}

//print(image_indices);

//Monthly NDVI

var Jan_composite = ee.Image(image_indices.get(0));
var Jan_ndvi = Jan_composite.select ("NDVI");
var Jan_ndvi_mask = Jan_ndvi.gte(0.5);

var Feb_composite = ee.Image(image_indices.get(1));
var Feb_ndvi = Feb_composite.select ("NDVI");
var Feb_ndvi_mask = Feb_ndvi.gte(0.5);

var Mar_composite = ee.Image(image_indices.get(2));
var Mar_ndvi = Mar_composite.select ("NDVI");
var Mar_ndvi_mask = Mar_ndvi.gte(0.5);

var Apr_composite = ee.Image(image_indices.get(3));
var Apr_ndvi = Apr_composite.select ("NDVI");
var Apr_ndvi_mask = Apr_ndvi.gte(0.5);

var Nov_composite = ee.Image(image_indices.get(4));
var Nov_ndvi = Nov_composite.select ("NDVI");
var Nov_ndvi_mask = Nov_ndvi.gte(0.5);

var Dec_composite = ee.Image(image_indices.get(5));
var Dec_ndvi = Dec_composite.select ("NDVI");
var Dec_ndvi_mask = Dec_ndvi.gte(0.5);

var six_month_ndvi = Jan_ndvi_mask.add(Feb_ndvi_mask).add(Mar_ndvi_mask)
                                  .add(Apr_ndvi_mask).add(Nov_ndvi_mask).add(Dec_ndvi_mask);

var nf_mask = six_month_ndvi.gte(6);                  
//print(nf_mask,{},"nf_mask");
Map.addLayer(nf_mask.updateMask(nf_mask), {},"nf_mask");

var forest1 = tc_gte30.unmask(0);
Map.addLayer(forest1.updateMask(forest1), {},"forest1");

var forest2 = nf_mask.eq(1).unmask(0);
Map.addLayer(forest2.updateMask(forest2), {},"forest2");

var forest = forest1.add(forest2);
forest= forest.gte(1);
Map.addLayer(forest.updateMask(forest), {},"forest");

var water = Jan_ndvi.lte(0)
            .and(Feb_ndvi.lte(0))
            .and(Mar_ndvi.lte(0))
            .and(Apr_ndvi.lte(0))
            .and(Nov_ndvi.lte(0))
            .and(Dec_ndvi.lte(0));
            
water = water.gte(1);            
Map.addLayer(water.updateMask(water), {},"water");


var evg = Jan_ndvi.gte(0.7).and(Feb_ndvi.gte(0.7))
                           .and(Mar_ndvi.gte(0.7))
                           .and(Apr_ndvi.gte(0.7))
                           .and(Nov_ndvi.gte(0.7))
                           .and(Dec_ndvi.gte(0.7));
                           
Map.addLayer(evg.updateMask(evg), {},'evg');

var area_mask =ee.Image.constant(1).clip(table).mask();

//---------------------------------------------------Build-Classification-Composite---------------------------------------

// convert list of images to single image
var class_composite = ee.Image(image_indices.get(0)).addBands(image_indices.get(1))
                                                    .addBands(image_indices.get(2))
                                                    .addBands(image_indices.get(3))
                                                    .addBands(image_indices.get(4))
                                                    .addBands(image_indices.get(5))
                                                    .addBands(gedi_roi)
                                                    .addBands(pal_variables)
                                                    .addBands(s1_VV_variables)
                                                    .addBands(s1_VH_variables)
                                                    .addBands(elevation)
                                                    .addBands(slope)
                                                    .updateMask(forest)
                                                    .updateMask(area_mask);
                                                    
print(class_composite);

var sel_bands = (['elevation','VV_rf_var_8','VV_rf_prom_8','VH_rf_var','B2_savg_1','VV_rf_dvar_2',
'VV_rf_var_2','B4_savg_1','VV_rf_svar_8','B4_dvar_3','ND_27_3','NDVI_3','VV_rf_var_1','B4_dent_2','B2_savg_2','ND_10_2',
'B4_idm_5','B8_savg_1','B5_savg_3','B4_dent_3','B4_idm_3','VV_rf_inertia_2','VV_rf_dent_8','B4_idm_2','B8A_savg_2',
'B6_savg_2','B2_savg_4']);

class_composite = class_composite.select(sel_bands);

var bands = class_composite.bandNames();
print(bands.size());
Map.addLayer(class_composite, {}, 'class_composite');


//----------------------------------------------------Train--Classifier----------------------------------------------------

//Training

var training = class_composite.sampleRegions({
      // Get the sample from the polygons FeatureCollection.
      collection: training,
      // Keep this list of properties from the polygons.
      properties: ['Class'],
      // Set the scale to get Sentinel pixels in the polygons.
      scale: 20,
      tileScale:16
      });
//print(training.limit(10));
print(training.size());

print(training.filter(ee.Filter.eq('Class', 0)));
var mangrove_size = (training.filter(ee.Filter.eq('Class', 0))).size();
print(mangrove_size,'mangrove_size');

var mdf_size = (training.filter(ee.Filter.eq('Class', 1))).size();
print(mdf_size,'mdf_size');

var rubber_size = (training.filter(ee.Filter.eq('Class', 2))).size();
print(rubber_size,'rubber_size');

var bamboo_size = (training.filter(ee.Filter.eq('Class', 3))).size();
print(bamboo_size,'bamboo_size');

var up_evg_size = (training.filter(ee.Filter.eq('Class', 4))).size();
print(up_evg_size,'up_evg_size');

var ind = training.filter(ee.Filter.eq('Class', 5));
var ind_size = (training.filter(ee.Filter.eq('Class', 5))).size();
print(ind_size,'ind_size');

var ddf = training.filter(ee.Filter.eq('Class', 6));
var ddf_size = (training.filter(ee.Filter.eq('Class', 6))).size();
print(ddf_size,'ddf_size');

var op = training.filter(ee.Filter.eq('Class', 7));
var op_size = (training.filter(ee.Filter.eq('Class', 7))).size();
print(op_size,'op_size');


training = training.filter(ee.Filter.eq('Class', 0))
           .merge(training.filter(ee.Filter.eq('Class', 1)))
           .merge(training.filter(ee.Filter.eq('Class', 2)))
           .merge(training.filter(ee.Filter.eq('Class', 3)))
           .merge(training.filter(ee.Filter.eq('Class', 4)))
           .merge(training.filter(ee.Filter.eq('Class', 5)))
           .merge(training.filter(ee.Filter.eq('Class', 6)))
           .merge(training.filter(ee.Filter.eq('Class', 7)))
           .merge(training.filter(ee.Filter.eq('Class', 8)))
           .merge(training.filter(ee.Filter.eq('Class', 9)));
           

print(training, 'train for IV');


var classifier = ee.Classifier.smileRandomForest(500)
                .train({
                  features: training, 
                  classProperty:'Class', 
                  inputProperties:bands,
                });
                
var dict = classifier.explain();
//print('Explain:',dict);    


var variable_importance = ee.FeatureCollection(ee.Feature(null, ee.Dictionary(dict).get('importance')));

/*
var chart =ui.Chart.feature.byProperty(variable_importance)
.setChartType('ColumnChart')
.setOptions({
title: 'Random Forest Variable Importance',
legend: {position: 'none'},
hAxis: {title: 'Bands'},
vAxis: {title: 'Importance'}
});
 
print(chart);
/**/

//----------------------------------------------Export--Important--Variables-------------------------------------------


// Export the FeatureCollection to a KML file.
Export.table.toDrive({
  collection: variable_importance,
  description:'RF_IV_Kachin',
  fileFormat: 'CSV'
});

//----------------------------------------------Selected--Bands-------------------------------------


//----------------------------------------------Generate--Classified--Map-----------------------------------------

var classified = class_composite.classify(classifier).unmask(100);

// Define a palette from the IGBP classification.

//var Palette = ['152106', '225129', '369b47', '30eb5b', '387242', '6a2325', 'c3aa69'];

var Palette = ['#008000', '#00FF00', '#808000', '#FFFF00', '#FF00FF', '6a2325', 'c3aa69']; //green, lime, olive,yellow,fuchsia

Map.addLayer(classified, {palette: Palette, min: 0, max: 7}, 'classification');


//---------------------------------------------Export---Maps--------------------------------------------------------

// Export the image, specifying scale and region.
Export.image.toDrive({
  image: classified,
  description: 'FT_Kachin_Run2',
  scale: 20,
  region: roi,
  maxPixels:653997022
});
